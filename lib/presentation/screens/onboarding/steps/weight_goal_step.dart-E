// lib/presentation/screens/onboarding/steps/weight_goal_step.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:lym_nutrition/domain/entities/user_profile.dart';
import 'package:lym_nutrition/presentation/themes/lym_design_system.dart';

class WeightGoalStep extends StatefulWidget {
  final UserProfile userProfile;
  final Function(UserProfile) onUpdateProfile;
  final VoidCallback onNextRequested;

  const WeightGoalStep({
    Key? key,
    required this.userProfile,
    required this.onUpdateProfile,
    required this.onNextRequested,
  }) : super(key: key);

  @override
  // ignore: library_private_types_in_public_api
  WeightGoalStepState createState() => WeightGoalStepState();
}

// ignore: public_member_api_docs
class WeightGoalStepState extends State<WeightGoalStep> {
  late WeightGoal _selectedWeightGoal;
  late double _currentWeightKg;
  double _goalRate = 0.5;
  final TextEditingController _goalRateController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _selectedWeightGoal = widget.userProfile.weightGoal;
    _currentWeightKg = widget
        .userProfile.weightKg; // Removed ?? 60.0 as weightKg is not nullable
    _goalRate = widget.userProfile.weightGoalKgPerWeek;
    // Ensure goalRate is not 0 if not maintaining/healthy eating, or set a sensible default.
    if (_selectedWeightGoal != WeightGoal.maintain &&
        _selectedWeightGoal != WeightGoal.healthyEating &&
        _goalRate == 0) {
      _goalRate = 0.5;
    }
    _goalRateController.text = _goalRate.toStringAsFixed(1);
  }

  @override
  void dispose() {
    _goalRateController.dispose();
    super.dispose();
  }

  void _updateProfile() {
    final updatedProfile = widget.userProfile.copyWith(
      weightGoal: _selectedWeightGoal,
      weightGoalKgPerWeek: _goalRate,
    );
    widget.onUpdateProfile(updatedProfile);
  }

  void validateAndProceed() {
    _updateProfile();
    if (_selectedWeightGoal != WeightGoal.maintain &&
        _selectedWeightGoal != WeightGoal.healthyEating &&
        (_goalRate <= 0 || _goalRateController.text.isEmpty)) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              'Veuillez définir un taux valide et positif pour votre objectif de poids.',
              style: LymDesignSystem.textTheme.bodyMedium
                  ?.copyWith(color: LymDesignSystem.white)),
          backgroundColor: LymDesignSystem.error,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd)),
          margin: const EdgeInsets.all(LymDesignSystem.spacing16),
        ),
      );
      return;
    }
    widget.onNextRequested();
  }

  String _getWeightGoalLabel(WeightGoal goal) {
    switch (goal) {
      case WeightGoal.lose:
        return 'Perdre du Poids';
      case WeightGoal.maintain:
        return 'Maintenir le Poids';
      case WeightGoal.gain:
        return 'Prendre du Poids';
      case WeightGoal.healthyEating:
        return 'Manger Sainement';
    }
  }

  String _getWeightGoalDescription(WeightGoal goal) {
    switch (goal) {
      case WeightGoal.lose:
        return 'Réduire progressivement le poids corporel.';
      case WeightGoal.maintain:
        return 'Maintenir votre poids actuel stable.';
      case WeightGoal.gain:
        return 'Augmenter la masse corporelle, idéalement musculaire.';
      case WeightGoal.healthyEating:
        return 'Adopter une alimentation équilibrée et nutritive.';
    }
  }

  IconData _getWeightGoalIcon(WeightGoal goal) {
    switch (goal) {
      case WeightGoal.lose:
        return Icons.trending_down_rounded;
      case WeightGoal.maintain:
        return Icons.balance_rounded;
      case WeightGoal.gain:
        return Icons.trending_up_rounded;
      case WeightGoal.healthyEating:
        return Icons.restaurant_menu_rounded;
    }
  }

  Color _getGoalAccentColor(WeightGoal goal) {
    switch (goal) {
      case WeightGoal.lose:
        return LymDesignSystem.coral; // Using coral for lose
      case WeightGoal.maintain:
        return LymDesignSystem.info; // Using info for maintain
      case WeightGoal.gain:
        return LymDesignSystem.success; // Using success for gain
      case WeightGoal.healthyEating:
        return LymDesignSystem.mint; // Using mint for healthy eating
    }
  }

  @override
  Widget build(BuildContext context) {
    // final currentAccentColor = LymDesignSystem.mint; // Example, if needed for specific elements, otherwise use _getGoalAccentColor

    return SingleChildScrollView(
      padding: const EdgeInsets.all(LymDesignSystem.spacing16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Quel est votre Objectif?',
            style: LymDesignSystem.textTheme.headlineSmall?.copyWith(
                color: LymDesignSystem.gray800, fontWeight: FontWeight.w600),
          ),
          const SizedBox(height: LymDesignSystem.spacing4),
          Text(
            'Sélectionnez votre objectif principal concernant votre poids. Cela nous aidera à personnaliser vos objectifs nutritionnels.',
            style: LymDesignSystem.textTheme.bodyMedium
                ?.copyWith(color: LymDesignSystem.gray600),
          ),
          const SizedBox(height: LymDesignSystem.spacing24),
          ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: WeightGoal.values.length,
            itemBuilder: (context, index) {
              final goal = WeightGoal.values[index];
              final bool isSelected = _selectedWeightGoal == goal;
              final Color accent = _getGoalAccentColor(goal);
              return Card(
                elevation: isSelected
                    ? LymDesignSystem.elevationSm
                    : LymDesignSystem.elevationXs,
                margin:
                    const EdgeInsets.only(bottom: LymDesignSystem.spacing12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
                  side: BorderSide(
                    color: isSelected ? accent : LymDesignSystem.gray300,
                    width: isSelected
                        ? LymDesignSystem.borderWidthMedium
                        : LymDesignSystem.borderWidthThin,
                  ),
                ),
                child: RadioListTile<WeightGoal>(
                  title: Text(
                    _getWeightGoalLabel(goal),
                    style: LymDesignSystem.textTheme.titleMedium?.copyWith(
                      color: isSelected
                          ? accent
                          : LymDesignSystem
                              .gray800, // Use accent color for selected title
                      fontWeight:
                          isSelected ? FontWeight.bold : FontWeight.normal,
                    ),
                  ),
                  subtitle: Text(
                    _getWeightGoalDescription(goal),
                    style: LymDesignSystem.textTheme.bodySmall
                        ?.copyWith(color: LymDesignSystem.gray600),
                  ),
                  secondary: Icon(_getWeightGoalIcon(goal),
                      color: isSelected ? accent : LymDesignSystem.gray500,
                      size: 32), // Increased icon size
                  value: goal,
                  groupValue: _selectedWeightGoal,
                  onChanged: (WeightGoal? value) {
                    if (value != null) {
                      setState(() {
                        _selectedWeightGoal = value;
                        if (_selectedWeightGoal == WeightGoal.maintain ||
                            _selectedWeightGoal == WeightGoal.healthyEating) {
                          _goalRate = 0;
                        } else if (_goalRate == 0) {
                          _goalRate =
                              0.5; // Default if switching from maintain or if it was 0
                        }
                        _goalRateController.text = _goalRate.toStringAsFixed(1);
                      });
                      _updateProfile();
                    }
                  },
                  activeColor: accent,
                  contentPadding: const EdgeInsets.symmetric(
                      vertical: LymDesignSystem.spacing16,
                      horizontal:
                          LymDesignSystem.spacing16), // Adjusted padding
                  controlAffinity: ListTileControlAffinity.trailing,
                ),
              );
            },
          ),
          const SizedBox(height: LymDesignSystem.spacing24),
          AnimatedSwitcher(
            duration: LymDesignSystem.durationMedium,
            transitionBuilder: (Widget child, Animation<double> animation) {
              return SizeTransition(
                  sizeFactor: animation,
                  child: FadeTransition(opacity: animation, child: child));
            },
            child: _selectedWeightGoal != WeightGoal.maintain &&
                    _selectedWeightGoal != WeightGoal.healthyEating
                ? Card(
                    key: const ValueKey('goalRateCard'),
                    elevation: LymDesignSystem.elevationXs,
                    margin:
                        const EdgeInsets.only(top: LymDesignSystem.spacing8),
                    shape: RoundedRectangleBorder(
                        borderRadius:
                            BorderRadius.circular(LymDesignSystem.radiusLg)),
                    child: Padding(
                      padding: const EdgeInsets.all(LymDesignSystem.spacing16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            _selectedWeightGoal == WeightGoal.lose
                                ? 'Rythme Cible de Perte de Poids (kg/semaine)'
                                : 'Rythme Cible de Prise de Poids (kg/semaine)',
                            style: LymDesignSystem.textTheme.titleMedium
                                ?.copyWith(
                                    color: LymDesignSystem.gray700,
                                    fontWeight: FontWeight.w600),
                          ),
                          const SizedBox(height: LymDesignSystem.spacing4),
                          Text(
                            'Ajustez le curseur ou saisissez une valeur pour définir votre progression hebdomadaire désirée. Un rythme modéré est généralement recommandé pour la durabilité.',
                            style: LymDesignSystem.textTheme.bodySmall
                                ?.copyWith(color: LymDesignSystem.gray600),
                          ),
                          const SizedBox(
                              height: LymDesignSystem
                                  .spacing20), // Adjusted spacing
                          Row(
                            children: [
                              Expanded(
                                child: Slider(
                                  value: _goalRate,
                                  min: 0.1,
                                  max: _selectedWeightGoal == WeightGoal.lose
                                      ? 1.0
                                      : 0.8,
                                  divisions:
                                      _selectedWeightGoal == WeightGoal.lose
                                          ? 9
                                          : 7,
                                  label:
                                      '${_goalRate.toStringAsFixed(1)} kg/week',
                                  activeColor:
                                      _getGoalAccentColor(_selectedWeightGoal),
                                  inactiveColor:
                                      _getGoalAccentColor(_selectedWeightGoal)
                                          .withValues(alpha: 0.3),
                                  thumbColor: LymDesignSystem
                                      .white, // Explicitly set thumb color
                                  overlayColor: WidgetStateProperty.all(
                                      _getGoalAccentColor(_selectedWeightGoal)
                                          .withValues(alpha: 0.2)),
                                  onChanged: (double value) {
                                    setState(() {
                                      _goalRate = double.parse(
                                          value.toStringAsFixed(1));
                                      _goalRateController.text =
                                          _goalRate.toStringAsFixed(1);
                                    });
                                    _updateProfile();
                                  },
                                ),
                              ),
                              const SizedBox(width: LymDesignSystem.spacing16),
                              SizedBox(
                                width: 90, // Slightly wider for better text fit
                                child: TextFormField(
                                  controller: _goalRateController,
                                  textAlign: TextAlign.center,
                                  decoration: InputDecoration(
                                    suffixText: 'kg',
                                    contentPadding: const EdgeInsets.symmetric(
                                        vertical: LymDesignSystem.spacing12,
                                        horizontal: LymDesignSystem
                                            .spacing8), // Adjusted padding
                                    border: OutlineInputBorder(
                                        borderRadius: BorderRadius.circular(
                                            LymDesignSystem
                                                .radiusMd)), // Changed to radiusMd
                                    focusedBorder: OutlineInputBorder(
                                      // Added focused border
                                      borderRadius: BorderRadius.circular(
                                          LymDesignSystem.radiusMd),
                                      borderSide: BorderSide(
                                          color: _getGoalAccentColor(
                                              _selectedWeightGoal),
                                          width: LymDesignSystem
                                              .borderWidthMedium),
                                    ),
                                  ),
                                  style: LymDesignSystem.textTheme.bodyLarge
                                      ?.copyWith(
                                          color: LymDesignSystem.gray800,
                                          fontWeight: FontWeight.w600),
                                  keyboardType:
                                      const TextInputType.numberWithOptions(
                                          decimal: true),
                                  inputFormatters: [
                                    FilteringTextInputFormatter.allow(
                                        RegExp(r'^\d*\.?\d{0,1}')),
                                  ],
                                  onChanged: (String value) {
                                    final double? parsedValue =
                                        double.tryParse(value);
                                    if (parsedValue != null) {
                                      const minVal = 0.1;
                                      final maxVal =
                                          _selectedWeightGoal == WeightGoal.lose
                                              ? 1.0
                                              : 0.8;
                                      double clampedValue =
                                          parsedValue.clamp(minVal, maxVal);
                                      clampedValue = double.parse(
                                          clampedValue.toStringAsFixed(
                                              1)); // Ensure one decimal place

                                      if (_goalRate != clampedValue) {
                                        setState(
                                            () => _goalRate = clampedValue);
                                      }
                                      // Update text field only if it doesn't match, to avoid cursor jumps
                                      if (_goalRateController.text !=
                                          clampedValue.toStringAsFixed(1)) {
                                        _goalRateController.text =
                                            clampedValue.toStringAsFixed(1);
                                        _goalRateController.selection =
                                            TextSelection.fromPosition(
                                                TextPosition(
                                                    offset: _goalRateController
                                                        .text.length));
                                      }
                                    }
                                    _updateProfile();
                                  },
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(
                              height: LymDesignSystem
                                  .spacing20), // Adjusted spacing
                          _buildGoalInformationCard(),
                        ],
                      ),
                    ),
                  )
                : Card(
                    key: const ValueKey('maintainInfoCard'),
                    elevation: LymDesignSystem.elevationXs,
                    margin:
                        const EdgeInsets.only(top: LymDesignSystem.spacing8),
                    shape: RoundedRectangleBorder(
                      borderRadius:
                          BorderRadius.circular(LymDesignSystem.radiusLg),
                      side: BorderSide(
                          color: LymDesignSystem.info.withValues(alpha: 0.5),
                          width: LymDesignSystem.borderWidthThin),
                    ),
                    color: LymDesignSystem.info.withValues(alpha: 0.05),
                    child: Padding(
                      padding: const EdgeInsets.all(LymDesignSystem.spacing16),
                      child: Row(
                        children: [
                          const Icon(Icons.info_outline_rounded,
                              color: LymDesignSystem.info, size: 28),
                          const SizedBox(width: LymDesignSystem.spacing12),
                          Expanded(
                            child: Text(
                              'Maintenir votre poids actuel de ${_currentWeightKg.toStringAsFixed(1)} kg implique d\'équilibrer votre apport calorique avec votre dépense énergétique. Nous vous aiderons à définir les bons objectifs.',
                              style: LymDesignSystem.textTheme.bodyMedium
                                  ?.copyWith(color: LymDesignSystem.gray700),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
          ),
        ],
      ),
    );
  }

  Widget _buildGoalInformationCard() {
    if (_selectedWeightGoal == WeightGoal.maintain ||
        _selectedWeightGoal == WeightGoal.healthyEating) {
      return const SizedBox.shrink(); // Guard clause
    }

    final goalColor = _getGoalAccentColor(_selectedWeightGoal);
    String title;
    String message;
    IconData icon;

    double targetWeightDiff = 5.0;
    int weeksToReachGoal =
        (_goalRate > 0) ? (targetWeightDiff / _goalRate).ceil() : 0;
    int monthsToReachGoal = (weeksToReachGoal / 4.33).ceil();

    String timeEstimate = '';
    if (_goalRate > 0 && weeksToReachGoal > 0) {
      if (weeksToReachGoal < 4) {
        timeEstimate =
            " Atteindre un changement de ${targetWeightDiff}kg à ce rythme prendrait environ $weeksToReachGoal semaines.";
      } else {
        timeEstimate =
            " Atteindre un changement de ${targetWeightDiff}kg à ce rythme prendrait environ $weeksToReachGoal semaines (environ $monthsToReachGoal mois).";
      }
    }

    switch (_selectedWeightGoal) {
      case WeightGoal.lose:
        title = 'Conseils pour une Perte de Poids Saine';
        message =
            'Un rythme durable est généralement de 0,5 à 1,0 kg par semaine. Cela aide à préserver la masse musculaire et assure un succès à long terme.$timeEstimate';
        icon = Icons.check_circle_outline_rounded;
        break;
      case WeightGoal.gain:
        title = 'Conseils pour une Prise de Poids Progressive';
        message =
            'Visez 0,2 à 0,5 kg par semaine pour privilégier le gain musculaire plutôt qu\'une accumulation excessive de graisse. La constance est la clé.$timeEstimate';
        icon = Icons.local_florist_outlined;
        break;
      case WeightGoal.maintain:
      case WeightGoal.healthyEating:
        // Ces cas ne devraient pas être atteints grâce à la garde en début,
        // mais ils sont ici pour l'exhaustivité si la logique change.
        title = 'Maintenir Votre Poids';
        message =
            'Concentrez-vous sur une nutrition équilibrée et des niveaux d\'activité constants pour maintenir votre poids actuel stable.';
        icon = Icons.balance_rounded;
        break;
    }

    return Container(
      padding: const EdgeInsets.all(LymDesignSystem.spacing12),
      decoration: BoxDecoration(
        color: goalColor.withValues(alpha: 0.08),
        borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
        border: Border.all(
            color: goalColor.withValues(alpha: 0.3),
            width: LymDesignSystem.borderWidthThin),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, color: goalColor, size: 24),
          const SizedBox(width: LymDesignSystem.spacing12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: LymDesignSystem.textTheme.titleSmall
                      ?.copyWith(color: goalColor, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: LymDesignSystem.spacing4),
                Text(
                  message,
                  style: LymDesignSystem.textTheme.bodySmall
                      ?.copyWith(color: LymDesignSystem.gray700),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
