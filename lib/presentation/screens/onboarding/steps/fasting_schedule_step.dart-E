// lib/presentation/screens/onboarding/steps/fasting_schedule_step.dart
import 'package:flutter/material.dart';
import 'package:lym_nutrition/domain/entities/user_profile.dart';
import 'package:lym_nutrition/presentation/themes/lym_design_system.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart'; // Added for icons

class FastingScheduleStep extends StatefulWidget {
  final UserProfile userProfile;
  final Function(UserProfile) onUpdateProfile;
  final VoidCallback onNextRequested;

  const FastingScheduleStep({
    Key? key,
    required this.userProfile,
    required this.onUpdateProfile,
    required this.onNextRequested,
  }) : super(key: key);

  @override
  // ignore: library_private_types_in_public_api
  FastingScheduleStepState createState() => FastingScheduleStepState();
}

// ignore: public_member_api_docs
class FastingScheduleStepState extends State<FastingScheduleStep> {
  late IntermittentFastingSchedule _fastingSchedule;
  final TextEditingController _startTimeController = TextEditingController();
  final TextEditingController _endTimeController = TextEditingController();

  final List<String> _weekdays = [
    'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim' // Shortened for FilterChip
  ];

  @override
  void initState() {
    super.initState();
    _fastingSchedule = widget.userProfile.fastingSchedule;
    _startTimeController.text = _fastingSchedule.fastingStartTime;
    _endTimeController.text = _fastingSchedule.fastingEndTime;
  }

  @override
  void dispose() {
    _startTimeController.dispose();
    _endTimeController.dispose();
    super.dispose();
  }

  void _updateProfile() {
    final updatedProfile = widget.userProfile.copyWith(
      fastingSchedule: _fastingSchedule,
    );
    widget.onUpdateProfile(updatedProfile);
  }

  void validateAndProceed() {
    _updateProfile();
    // Basic validation: if a schedule requiring days is selected, ensure days are selected.
    if ((_fastingSchedule.type == IntermittentFastingType.fasting5_2 &&
            _fastingSchedule.fastingDays.length != 2) ||
        (_fastingSchedule.type == IntermittentFastingType.alternateDay &&
            _fastingSchedule.fastingDays.isEmpty)) {
      // Optionally, show a snackbar or dialog here to inform the user.
      // For now, we'll prevent proceeding if validation fails.
      // ScaffoldMessenger.of(context).showSnackBar(
      //   SnackBar(content: Text('Veuillez compléter la configuration du jeûne.')),
      // );
      // return; // Uncomment to enforce validation
    }
    widget.onNextRequested();
  }

  void _updateFastingType(IntermittentFastingType? type) {
    if (type != null) {
      setState(() {
        if (type == IntermittentFastingType.none) {
          _fastingSchedule = IntermittentFastingSchedule(type: type);
        } else {
          _fastingSchedule = IntermittentFastingSchedule.fromType(type);
          _startTimeController.text = _fastingSchedule.fastingStartTime;
          _endTimeController.text = _fastingSchedule.fastingEndTime;
        }
      });
      _updateProfile();
    }
  }

  Future<void> _selectTime(BuildContext context, bool isStartTime) async {
    final TimeOfDay initialTime = isStartTime
        ? _parseTimeOfDay(_fastingSchedule.fastingStartTime)
        : _parseTimeOfDay(_fastingSchedule.fastingEndTime);

    final TimeOfDay? selectedTime = await showTimePicker(
      context: context,
      initialTime: initialTime,
      helpText:
          isStartTime ? 'HEURE DE DÉBUT DU JEÛNE' : 'HEURE DE FIN DU JEÛNE',
      builder: (context, child) {
        return Theme(
          data: LymDesignSystem.lightTheme.copyWith(
            timePickerTheme:
                LymDesignSystem.lightTheme.timePickerTheme.copyWith(
              backgroundColor: LymDesignSystem.white,
              hourMinuteTextColor: LymDesignSystem.gray800,
              hourMinuteColor: LymDesignSystem.gray100,
              dayPeriodTextColor: LymDesignSystem.gray800,
              dayPeriodColor: LymDesignSystem.gray100,
              dialHandColor: LymDesignSystem.amberDark, // Changed accent
              dialBackgroundColor: LymDesignSystem.gray200,
              entryModeIconColor: LymDesignSystem.amber, // Changed accent
              helpTextStyle: LymDesignSystem.textTheme.labelSmall?.copyWith(
                  color: LymDesignSystem.amberDark,
                  fontWeight: FontWeight.bold), // Styled help text
            ),
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: LymDesignSystem.amberDark, // Changed accent
              ),
            ),
          ),
          child: child!,
        );
      },
    );

    if (selectedTime != null) {
      final newTime =
          '${selectedTime.hour.toString().padLeft(2, '0')}:${selectedTime.minute.toString().padLeft(2, '0')}';
      setState(() {
        if (isStartTime) {
          _startTimeController.text = newTime;
          _fastingSchedule =
              _fastingSchedule.copyWith(fastingStartTime: newTime);
        } else {
          _endTimeController.text = newTime;
          _fastingSchedule = _fastingSchedule.copyWith(fastingEndTime: newTime);
        }
      });
      _updateProfile();
    }
  }

  TimeOfDay _parseTimeOfDay(String timeString) {
    final parts = timeString.split(':');
    return TimeOfDay(
      hour: int.parse(parts[0]),
      minute: int.parse(parts[1]),
    );
  }

  void _toggleFastingDay(int dayIndex) {
    if (_fastingSchedule.type == IntermittentFastingType.fasting5_2 ||
        _fastingSchedule.type == IntermittentFastingType.alternateDay ||
        _fastingSchedule.type == IntermittentFastingType.custom) {
      setState(() {
        final dayNumber = dayIndex + 1;
        final updatedDays = List<int>.from(_fastingSchedule.fastingDays);

        if (updatedDays.contains(dayNumber)) {
          updatedDays.remove(dayNumber);
        } else {
          updatedDays.add(dayNumber);
        }
        _fastingSchedule =
            _fastingSchedule.copyWith(fastingDays: updatedDays..sort());
      });
      _updateProfile();
    }
  }

  String _getFastingTypeLabel(IntermittentFastingType type) {
    switch (type) {
      case IntermittentFastingType.none:
        return 'Pas de jeûne intermittent';
      case IntermittentFastingType.fasting16_8:
        return 'Jeûne Classique 16/8';
      case IntermittentFastingType.fasting18_6:
        return 'Jeûne Intermédiaire 18/6';
      case IntermittentFastingType.fasting20_4:
        return 'Jeûne Avancé 20/4 (Warrior)';
      case IntermittentFastingType.fasting5_2:
        return 'Méthode 5:2 (Hebdomadaire)';
      case IntermittentFastingType.alternateDay:
        return 'Jeûne Alterné (Un jour sur deux)';
      case IntermittentFastingType.custom:
        return 'Personnaliser mon Jeûne';
    }
  }

  String _getFastingTypeDescription(IntermittentFastingType type) {
    switch (type) {
      case IntermittentFastingType.none:
        return 'Vous ne suivez pas de protocole de jeûne.';
      case IntermittentFastingType.fasting16_8:
        return '16 heures de jeûne, fenêtre d\'alimentation de 8 heures.';
      case IntermittentFastingType.fasting18_6:
        return '18 heures de jeûne, fenêtre d\'alimentation de 6 heures.';
      case IntermittentFastingType.fasting20_4:
        return '20 heures de jeûne, fenêtre d\'alimentation de 4 heures.';
      case IntermittentFastingType.fasting5_2:
        return '5 jours d\'alimentation normale, 2 jours de restriction calorique.';
      case IntermittentFastingType.alternateDay:
        return 'Alternez jours de jeûne et jours d\'alimentation normale.';
      case IntermittentFastingType.custom:
        return 'Définissez vos propres horaires et jours de jeûne.';
    }
  }

  IconData _getFastingTypeIcon(IntermittentFastingType type) {
    switch (type) {
      case IntermittentFastingType.none:
        return MdiIcons.foodOffOutline;
      case IntermittentFastingType.fasting16_8:
        return MdiIcons.clockTimeEightOutline;
      case IntermittentFastingType.fasting18_6:
        return MdiIcons.clockTimeSixOutline;
      case IntermittentFastingType.fasting20_4:
        return MdiIcons.clockTimeFourOutline;
      case IntermittentFastingType.fasting5_2:
        return MdiIcons.calendarWeek;
      case IntermittentFastingType.alternateDay:
        return MdiIcons.calendarRefreshOutline;
      case IntermittentFastingType.custom:
        return MdiIcons.cogOutline;
    }
  }

  Widget _buildInfoCard(String title, String content,
      {IconData? icon, Color color = LymDesignSystem.info, Color? iconColor}) {
    // Made icon nullable
    return Container(
      padding: const EdgeInsets.all(LymDesignSystem.spacing16),
      decoration: BoxDecoration(
        color: color.withValues(alpha: 0.08),
        borderRadius: BorderRadius.circular(LymDesignSystem.radiusLg),
        border: Border.all(
            color: color.withValues(alpha: 0.4),
            width: LymDesignSystem.borderWidthThin),
      ),
      child: Row(
        crossAxisAlignment:
            CrossAxisAlignment.center, // Center align items vertically
        children: [
          if (icon != null) ...[
            // Conditionally display icon
            Icon(icon, color: iconColor ?? color, size: 28),
            const SizedBox(width: LymDesignSystem.spacing12),
          ],
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: LymDesignSystem.textTheme.titleMedium?.copyWith(
                      color: color,
                      fontWeight: FontWeight.bold), // Bolder title
                ),
                const SizedBox(height: LymDesignSystem.spacing4),
                Text(
                  content,
                  style: LymDesignSystem.textTheme.bodyMedium?.copyWith(
                      color: LymDesignSystem.gray700,
                      height: 1.4), // Improved line height
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    const currentAccentColor = LymDesignSystem.amber; // Accent for this step

    return SingleChildScrollView(
      padding:
          const EdgeInsets.all(LymDesignSystem.spacing20), // Increased padding
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Votre Rythme de Jeûne', // More engaging title
            style: LymDesignSystem.textTheme.headlineSmall?.copyWith(
                color: LymDesignSystem.gray800, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: LymDesignSystem.spacing8),
          Text(
            'Si vous pratiquez le jeûne intermittent, aidez-nous à comprendre votre routine. Sinon, vous pouvez passer cette étape.', // More engaging subtitle
            style: LymDesignSystem.textTheme.bodyMedium
                ?.copyWith(color: LymDesignSystem.gray700),
          ),
          const SizedBox(height: LymDesignSystem.spacing32),
          Text(
            'Quel est votre protocole de jeûne ?', // More direct question
            style: LymDesignSystem.textTheme.titleLarge?.copyWith(
                color: LymDesignSystem.gray700, fontWeight: FontWeight.w600),
          ),
          const SizedBox(height: LymDesignSystem.spacing12),
          Card(
            elevation: LymDesignSystem.elevationSm,
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(LymDesignSystem.radiusLg)),
            child: Column(
              children: IntermittentFastingType.values.map((type) {
                final isSelected = _fastingSchedule.type == type;
                return RadioListTile<IntermittentFastingType>(
                  title: Text(
                    _getFastingTypeLabel(type),
                    style: LymDesignSystem.textTheme.titleMedium?.copyWith(
                      color: isSelected
                          ? currentAccentColor
                          : LymDesignSystem.gray800,
                      fontWeight:
                          isSelected ? FontWeight.bold : FontWeight.w500,
                    ),
                  ),
                  subtitle: Text(
                    _getFastingTypeDescription(type),
                    style: LymDesignSystem.textTheme.bodySmall
                        ?.copyWith(color: LymDesignSystem.gray600),
                  ),
                  secondary: Icon(_getFastingTypeIcon(type),
                      color: isSelected
                          ? currentAccentColor
                          : LymDesignSystem.gray400,
                      size: 28),
                  value: type,
                  groupValue: _fastingSchedule.type,
                  onChanged: _updateFastingType,
                  activeColor: currentAccentColor,
                  controlAffinity: ListTileControlAffinity.trailing,
                  contentPadding: const EdgeInsets.symmetric(
                      horizontal: LymDesignSystem.spacing16,
                      vertical: LymDesignSystem.spacing12),
                );
              }).toList(),
            ),
          ),
          const SizedBox(height: LymDesignSystem.spacing32),
          if (_fastingSchedule.type != IntermittentFastingType.none) ...[
            const Divider(
                color: LymDesignSystem.gray300,
                thickness: LymDesignSystem.borderWidthThin),
            const SizedBox(height: LymDesignSystem.spacing24),
            Text(
              'Personnalisation de votre Jeûne',
              style: LymDesignSystem.textTheme.titleLarge?.copyWith(
                  color: LymDesignSystem.gray700, fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: LymDesignSystem.spacing20),

            if (_fastingSchedule.type == IntermittentFastingType.fasting16_8 ||
                _fastingSchedule.type == IntermittentFastingType.fasting18_6 ||
                _fastingSchedule.type == IntermittentFastingType.fasting20_4 ||
                _fastingSchedule.type == IntermittentFastingType.custom)
              Card(
                elevation: LymDesignSystem.elevationSm,
                shape: RoundedRectangleBorder(
                    borderRadius:
                        BorderRadius.circular(LymDesignSystem.radiusLg)),
                child: Padding(
                  padding: const EdgeInsets.all(LymDesignSystem.spacing20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Fenêtre de Jeûne Quotidienne',
                        style: LymDesignSystem.textTheme.titleMedium?.copyWith(
                            color: LymDesignSystem.gray700,
                            fontWeight: FontWeight.w600),
                      ),
                      const SizedBox(height: LymDesignSystem.spacing16),
                      Row(
                        children: [
                          Expanded(
                            child: TextFormField(
                              controller: _startTimeController,
                              readOnly: true,
                              onTap: () => _selectTime(context, true),
                              decoration: InputDecoration(
                                labelText: 'Début du Jeûne',
                                hintText: 'Ex: 20:00',
                                prefixIcon: Icon(MdiIcons.weatherNight,
                                    color: currentAccentColor.withValues(alpha: 0.9),
                                    size: 22),
                                helperText:
                                    'Fin de votre période d\'alimentation.',
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(
                                        LymDesignSystem.radiusMd)),
                                focusedBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(
                                      LymDesignSystem.radiusMd),
                                  borderSide: const BorderSide(
                                      color: currentAccentColor,
                                      width: LymDesignSystem.borderWidthFocus),
                                ),
                              ),
                              style: LymDesignSystem.textTheme.bodyLarge
                                  ?.copyWith(color: LymDesignSystem.gray800),
                            ),
                          ),
                          const SizedBox(width: LymDesignSystem.spacing16),
                          Expanded(
                            child: TextFormField(
                              controller: _endTimeController,
                              readOnly: true,
                              onTap: () => _selectTime(context, false),
                              decoration: InputDecoration(
                                labelText: 'Fin du Jeûne',
                                hintText: 'Ex: 12:00',
                                prefixIcon: Icon(MdiIcons.weatherSunny,
                                    color: currentAccentColor.withValues(alpha: 0.9),
                                    size: 22),
                                helperText:
                                    'Début de votre période d\'alimentation.',
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(
                                        LymDesignSystem.radiusMd)),
                                focusedBorder: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(
                                      LymDesignSystem.radiusMd),
                                  borderSide: const BorderSide(
                                      color: currentAccentColor,
                                      width: LymDesignSystem.borderWidthFocus),
                                ),
                              ),
                              style: LymDesignSystem.textTheme.bodyLarge
                                  ?.copyWith(color: LymDesignSystem.gray800),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: LymDesignSystem.spacing20),
                      _buildInfoCard(
                        'Votre Fenêtre d\'Alimentation',
                        'Vous jeûnerez de ${_fastingSchedule.fastingStartTime} à ${_fastingSchedule.fastingEndTime}. Votre fenêtre d\'alimentation sera en dehors de ces heures.',
                        icon: MdiIcons.timelapse,
                        color: currentAccentColor,
                        iconColor:
                            currentAccentColor, // Ensure icon matches card accent
                      ),
                    ],
                  ),
                ),
              ),
            const SizedBox(
                height: LymDesignSystem.spacing16), // Spacing between cards
            if (_fastingSchedule.type == IntermittentFastingType.fasting5_2 ||
                _fastingSchedule.type == IntermittentFastingType.alternateDay ||
                _fastingSchedule.type == IntermittentFastingType.custom)
              Card(
                elevation: LymDesignSystem.elevationSm,
                shape: RoundedRectangleBorder(
                    borderRadius:
                        BorderRadius.circular(LymDesignSystem.radiusLg)),
                child: Padding(
                  padding: const EdgeInsets.all(LymDesignSystem.spacing20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _fastingSchedule.type == IntermittentFastingType.custom
                            ? 'Jours de Jeûne (Optionnel)'
                            : 'Jours de Jeûne Spécifiques',
                        style: LymDesignSystem.textTheme.titleMedium?.copyWith(
                            color: LymDesignSystem.gray700,
                            fontWeight: FontWeight.w600),
                      ),
                      const SizedBox(height: LymDesignSystem.spacing8),
                      Text(
                        _fastingSchedule.type == IntermittentFastingType.custom
                            ? 'Si votre jeûne personnalisé ne s\'applique pas tous les jours, sélectionnez les jours concernés.'
                            : 'Sélectionnez les jours où vous appliquerez ce protocole de jeûne.',
                        style: LymDesignSystem.textTheme.bodySmall
                            ?.copyWith(color: LymDesignSystem.gray600),
                      ),
                      const SizedBox(height: LymDesignSystem.spacing16),
                      Wrap(
                        spacing: LymDesignSystem.spacing10,
                        runSpacing: LymDesignSystem.spacing10,
                        children: List.generate(_weekdays.length, (index) {
                          final isSelected =
                              _fastingSchedule.fastingDays.contains(index + 1);
                          return FilterChip(
                            label: Text(_weekdays[index]),
                            selected: isSelected,
                            onSelected: (_) => _toggleFastingDay(index),
                            backgroundColor: isSelected
                                ? currentAccentColor.withValues(alpha: 0.15)
                                : LymDesignSystem.gray100,
                            selectedColor: currentAccentColor.withValues(alpha: 0.25),
                            checkmarkColor: currentAccentColor,
                            labelStyle:
                                LymDesignSystem.textTheme.bodyMedium?.copyWith(
                              color: isSelected
                                  ? currentAccentColor
                                  : LymDesignSystem.gray700,
                              fontWeight: isSelected
                                  ? FontWeight.bold
                                  : FontWeight.normal,
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(
                                  LymDesignSystem.radiusMd),
                              side: BorderSide(
                                color: isSelected
                                    ? currentAccentColor
                                    : LymDesignSystem.gray300,
                                width: isSelected
                                    ? LymDesignSystem.borderWidthMedium
                                    : LymDesignSystem.borderWidthThin,
                              ),
                            ),
                            padding: const EdgeInsets.symmetric(
                                horizontal: LymDesignSystem.spacing12,
                                vertical: LymDesignSystem.spacing8),
                          );
                        }),
                      ),
                      const SizedBox(height: LymDesignSystem.spacing20),
                      if (_fastingSchedule.type ==
                              IntermittentFastingType.fasting5_2 &&
                          _fastingSchedule.fastingDays.length != 2)
                        _buildInfoCard(
                          'Rappel pour le Jeûne 5:2',
                          'Le protocole 5:2 implique 2 jours de jeûne (ou restriction calorique) par semaine. Veuillez sélectionner exactement deux jours.',
                          icon: MdiIcons.alertCircleOutline,
                          color: LymDesignSystem.warning,
                          iconColor: LymDesignSystem
                              .warning, // Ensure icon matches card accent
                        )
                      else if (_fastingSchedule.fastingDays.isNotEmpty)
                        _buildInfoCard(
                          'Vos Jours de Jeûne',
                          'Vous avez indiqué jeûner les jours suivants : ${_fastingSchedule.fastingDays.map((day) => _weekdays[day - 1]).join(', ')}.',
                          icon: MdiIcons.calendarCheckOutline,
                          color: currentAccentColor,
                          iconColor:
                              currentAccentColor, // Ensure icon matches card accent
                        )
                      else if (_fastingSchedule.type !=
                              IntermittentFastingType.custom &&
                          (_fastingSchedule.type ==
                                  IntermittentFastingType.fasting5_2 ||
                              _fastingSchedule.type ==
                                  IntermittentFastingType.alternateDay))
                        _buildInfoCard(
                          'Sélection Requise',
                          'Pour ce type de jeûne, veuillez sélectionner les jours concernés.',
                          icon: MdiIcons.calendarAlert,
                          color: LymDesignSystem.info,
                          iconColor: LymDesignSystem
                              .info, // Ensure icon matches card accent
                        ),
                    ],
                  ),
                ),
              ),
            const SizedBox(height: LymDesignSystem.spacing24),
            _buildInfoCard(
              'Flexibilité et Suivi',
              'Lym Nutrition s\'adaptera à votre planning de jeûne. Vous pourrez toujours ajuster ces préférences dans vos paramètres de profil.',
              icon: MdiIcons.cogClockwise,
              color: LymDesignSystem.mint,
              iconColor:
                  LymDesignSystem.mint, // Ensure icon matches card accent
            ),
          ],
        ],
      ),
    );
  }
}
