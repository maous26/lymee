// lib/presentation/screens/onboarding/steps/supplements_step.dart
import 'package:flutter/material.dart';
import 'package:lym_nutrition/domain/entities/user_profile.dart';
import 'package:lym_nutrition/presentation/themes/lym_design_system.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart'; // Added for icons

class SupplementsStep extends StatefulWidget {
  final UserProfile userProfile;
  final VoidCallback onNextRequested;
  final List<Supplement> initialSupplements;

  const SupplementsStep({
    Key? key,
    required this.userProfile,
    required this.onNextRequested,
    required this.initialSupplements,
  }) : super(key: key);

  @override
  SupplementsStepState createState() => SupplementsStepState();
}

class SupplementsStepState extends State<SupplementsStep> {
  final _formKey = GlobalKey<FormState>();
  List<Supplement> _supplements = [];
  bool _showAddSupplementForm = false;
  final _supplementNameController = TextEditingController();
  final _supplementDosageController = TextEditingController();
  final _supplementUnitController = TextEditingController();
  final _supplementTimingController = TextEditingController();
  final _supplementNotesController = TextEditingController();

  final List<String> _commonSupplements = [
    'Vitamine D',
    'Vitamine C',
    'Magnésium',
    'Zinc',
    'Fer',
    'Calcium',
    'Oméga 3',
    'Vitamine B12',
    'Probiotiques',
    'Protéines en poudre',
    'Créatine',
    'BCAA',
    'Multivitamines',
    'Collagène',
    'Curcumine',
    'Ashwagandha'
  ];

  final List<String> _commonUnits = [
    'mg',
    'g',
    'μg',
    'mcg',
    'UI',
    'ml',
    'gouttes',
    'gélule(s)',
    'comprimé(s)',
    'cuillère(s) à café',
    'cuillère(s) à soupe',
    'sachet(s)',
    'portion(s)'
  ];

  final List<String> _commonTimings = [
    'Matin',
    'Midi',
    'Soir',
    'Avant repas',
    'Pendant repas',
    'Après repas',
    'Avant entraînement',
    'Après entraînement',
    'Au coucher',
    'À jeun',
    'Selon besoin'
  ];

  @override
  void initState() {
    super.initState();
    _supplements = List.from(widget.initialSupplements);
  }

  @override
  void dispose() {
    _supplementNameController.dispose();
    _supplementDosageController.dispose();
    _supplementUnitController.dispose();
    _supplementTimingController.dispose();
    _supplementNotesController.dispose();
    super.dispose();
  }

  List<Supplement> get currentSupplements => _supplements;

  void _toggleAddSupplementForm() {
    setState(() {
      _showAddSupplementForm = !_showAddSupplementForm;
      if (_showAddSupplementForm) {
        _formKey.currentState?.reset();
        _supplementNameController.clear();
        _supplementDosageController.clear();
        _supplementUnitController.clear();
        _supplementTimingController.clear();
        _supplementNotesController.clear();
      }
    });
  }

  void _addSupplement() {
    if (_formKey.currentState!.validate()) {
      final newSupplement = Supplement(
        name: _supplementNameController.text.trim(),
        dosage: _supplementDosageController.text.trim(),
        unit: _supplementUnitController.text.trim(),
        timing: _supplementTimingController.text.trim(),
        notes: _supplementNotesController.text.isEmpty
            ? null
            : _supplementNotesController.text.trim(),
      );

      setState(() {
        _supplements.add(newSupplement);
        _showAddSupplementForm = false;
      });
      // Optionally, provide feedback
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('${newSupplement.name} ajouté à votre liste.'),
          backgroundColor: LymDesignSystem.success,
          behavior: SnackBarBehavior.floating,
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Veuillez corriger les erreurs du formulaire.'),
          backgroundColor: LymDesignSystem.error,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }

  void _removeSupplement(int index) {
    final removedSupplement = _supplements[index];
    setState(() {
      _supplements.removeAt(index);
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('${removedSupplement.name} supprimé.'),
        backgroundColor: LymDesignSystem.gray700,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _editSupplement(int index, Supplement supplement) {
    _supplementNameController.text = supplement.name;
    _supplementDosageController.text = supplement.dosage;
    _supplementUnitController.text = supplement.unit;
    _supplementTimingController.text = supplement.timing;
    _supplementNotesController.text = supplement.notes ?? '';

    setState(() {
      _supplements
          .removeAt(index); // Remove to re-add if saved, or simply to edit
      _showAddSupplementForm = true; // Show form to edit
    });
    // User will then click "Add" which now acts as "Save"
  }

  void validateAndProceed() {
    widget.onNextRequested();
  }

  Widget _buildAutocompleteField({
    required TextEditingController controller,
    required List<String> options,
    required String labelText,
    required String hintText,
    IconData? prefixIcon,
    bool isNumeric = false,
    String? Function(String?)? validator,
  }) {
    return Autocomplete<String>(
      optionsBuilder: (TextEditingValue textEditingValue) {
        if (textEditingValue.text.isEmpty) {
          return options; // Show all common options if empty
        }
        return options.where((String option) {
          return option
              .toLowerCase()
              .contains(textEditingValue.text.toLowerCase());
        });
      },
      onSelected: (String selection) {
        controller.text = selection;
        FocusScope.of(context).nextFocus();
      },
      fieldViewBuilder:
          (context, textEditingController, focusNode, onFieldSubmitted) {
        // Sync internal with external controller
        if (controller.text != textEditingController.text) {
          textEditingController.text = controller.text;
        }
        return TextFormField(
          controller: textEditingController,
          focusNode: focusNode,
          decoration: InputDecoration(
            labelText: '$labelText *',
            hintText: hintText,
            prefixIcon: prefixIcon != null
                ? Icon(prefixIcon, color: LymDesignSystem.gray500, size: 20)
                : null,
            // Using LymDesignSystem styles for inputs
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
              borderSide: const BorderSide(color: LymDesignSystem.gray300),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
              borderSide: const BorderSide(
                  color: LymDesignSystem.gray300,
                  width: LymDesignSystem.borderWidthThin),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
              borderSide: const BorderSide(
                  color: LymDesignSystem.mint,
                  width: LymDesignSystem.borderWidthFocus),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
              borderSide: const BorderSide(
                  color: LymDesignSystem.error,
                  width: LymDesignSystem.borderWidthMedium),
            ),
            focusedErrorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
              borderSide: const BorderSide(
                  color: LymDesignSystem.error,
                  width: LymDesignSystem.borderWidthFocus),
            ),
            filled: true,
            fillColor: LymDesignSystem.white, // Brighter fill
            contentPadding: const EdgeInsets.symmetric(
                vertical: LymDesignSystem.spacing12,
                horizontal: LymDesignSystem.spacing16),
          ),
          textCapitalization: TextCapitalization.sentences,
          keyboardType: isNumeric ? TextInputType.number : TextInputType.text,
          validator: validator ??
              (value) {
                if (value == null || value.isEmpty) {
                  return '$labelText est requis.';
                }
                return null;
              },
          onChanged: (value) {
            controller.text = value; // Keep external controller updated
          },
        );
      },
      optionsViewBuilder: (context, onSelected, options) {
        return Align(
          alignment: Alignment.topLeft,
          child: Material(
            elevation: LymDesignSystem.elevationMd,
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(LymDesignSystem.radiusSm),
                side: const BorderSide(color: LymDesignSystem.gray200)),
            color: LymDesignSystem.white,
            child: ConstrainedBox(
              constraints: BoxConstraints(
                  maxHeight: 220,
                  maxWidth: MediaQuery.of(context).size.width -
                      LymDesignSystem.spacing32 * 2),
              child: ListView.builder(
                padding: const EdgeInsets.symmetric(
                    vertical: LymDesignSystem.spacing4),
                shrinkWrap: true,
                itemCount: options.length,
                itemBuilder: (BuildContext context, int index) {
                  final String option = options.elementAt(index);
                  return InkWell(
                    onTap: () {
                      onSelected(option);
                    },
                    child: Padding(
                      padding: const EdgeInsets.symmetric(
                          horizontal: LymDesignSystem.spacing16,
                          vertical: LymDesignSystem.spacing10),
                      child: Text(option,
                          style: LymDesignSystem.textTheme.bodyMedium
                              ?.copyWith(color: LymDesignSystem.gray700)),
                    ),
                  );
                },
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildTextFormField({
    required TextEditingController controller,
    required String labelText,
    required String hintText,
    IconData? prefixIcon,
    bool isNumeric = false,
    int maxLines = 1,
    bool isOptional = false,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: labelText + (isOptional ? ' (Optionnel)' : ' *'),
        hintText: hintText,
        prefixIcon: prefixIcon != null
            ? Icon(prefixIcon, color: LymDesignSystem.gray500, size: 20)
            : null,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
          borderSide: const BorderSide(color: LymDesignSystem.gray300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
          borderSide: const BorderSide(
              color: LymDesignSystem.gray300,
              width: LymDesignSystem.borderWidthThin),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
          borderSide: const BorderSide(
              color: LymDesignSystem.mint,
              width: LymDesignSystem.borderWidthFocus),
        ),
        errorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
          borderSide: const BorderSide(
              color: LymDesignSystem.error,
              width: LymDesignSystem.borderWidthMedium),
        ),
        focusedErrorBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(LymDesignSystem.radiusMd),
          borderSide: const BorderSide(
              color: LymDesignSystem.error,
              width: LymDesignSystem.borderWidthFocus),
        ),
        filled: true,
        fillColor: LymDesignSystem.white, // Brighter fill
        contentPadding: const EdgeInsets.symmetric(
            vertical: LymDesignSystem.spacing12,
            horizontal: LymDesignSystem.spacing16),
      ),
      keyboardType: isNumeric
          ? const TextInputType.numberWithOptions(decimal: true)
          : TextInputType.text,
      textCapitalization: TextCapitalization.sentences,
      maxLines: maxLines,
      validator: (value) {
        if (!isOptional && (value == null || value.isEmpty)) {
          return '$labelText est requis.';
        }
        if (isNumeric &&
            value != null &&
            value.isNotEmpty &&
            double.tryParse(value.replaceAll(',', '.')) == null) {
          return 'Veuillez entrer un nombre valide.';
        }
        return null;
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final design = LymDesignSystem.textTheme;

    return SingleChildScrollView(
      padding:
          const EdgeInsets.all(LymDesignSystem.spacing20), // Increased padding
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Vos Compléments Alimentaires',
            style: design.headlineSmall?.copyWith(
                color: LymDesignSystem.gray800, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: LymDesignSystem.spacing8),
          Text(
            'Listez les compléments que vous utilisez. C\'est optionnel, mais cela nous aide à affiner nos conseils pour vous.',
            style: design.bodyMedium?.copyWith(color: LymDesignSystem.gray700),
          ),
          const SizedBox(height: LymDesignSystem.spacing24),

          // Informational Card - more subtle
          Container(
            padding: const EdgeInsets.all(LymDesignSystem.spacing16),
            decoration: BoxDecoration(
                color: LymDesignSystem.mint.withValues(alpha: 0.05),
                borderRadius: BorderRadius.circular(LymDesignSystem.radiusLg),
                border: Border.all(
                    color: LymDesignSystem.mint.withValues(alpha: 0.2),
                    width: LymDesignSystem.borderWidthThin)),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Icon(MdiIcons.pillMultiple,
                    color: LymDesignSystem.mintDark, size: 28),
                const SizedBox(width: LymDesignSystem.spacing12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Pourquoi ajouter vos compléments ?',
                        style: design.titleMedium?.copyWith(
                          fontWeight: FontWeight.w600,
                          color: LymDesignSystem.mintDark,
                        ),
                      ),
                      const SizedBox(height: LymDesignSystem.spacing4),
                      Text(
                        'Connaître vos compléments nous permet d\'éviter les interactions potentielles et d\'ajuster les apports nutritionnels recommandés.',
                        style: design.bodySmall?.copyWith(
                            color: LymDesignSystem.gray700, height: 1.4),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: LymDesignSystem.spacing32),

          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Text(
                _supplements.isEmpty
                    ? 'Ajouter un complément'
                    : 'Vos Compléments (${_supplements.length})',
                style: design.titleLarge?.copyWith(
                  color: LymDesignSystem.gray700,
                  fontWeight: FontWeight.w600,
                ),
              ),
              TextButton.icon(
                onPressed: _toggleAddSupplementForm,
                icon: Icon(
                  _showAddSupplementForm
                      ? MdiIcons.closeCircleOutline
                      : MdiIcons.plusCircleOutline,
                  size: 22,
                  color: _showAddSupplementForm
                      ? LymDesignSystem.error
                      : LymDesignSystem.mint,
                ),
                label: Text(_showAddSupplementForm ? 'Fermer' : 'Nouveau',
                    style: design.labelLarge?.copyWith(
                        color: _showAddSupplementForm
                            ? LymDesignSystem.error
                            : LymDesignSystem.mint,
                        fontWeight: FontWeight.w600)),
                style: TextButton.styleFrom(
                    padding: const EdgeInsets.symmetric(
                        horizontal: LymDesignSystem.spacing12,
                        vertical: LymDesignSystem.spacing8),
                    shape: RoundedRectangleBorder(
                        borderRadius:
                            BorderRadius.circular(LymDesignSystem.radiusSm))),
              ),
            ],
          ),
          const SizedBox(height: LymDesignSystem.spacing4),
          const Divider(
              color: LymDesignSystem.gray200,
              height: LymDesignSystem.spacing20),

          AnimatedSwitcher(
            duration: LymDesignSystem.durationMedium,
            switchInCurve: Curves.easeOutCubic,
            switchOutCurve: Curves.easeInCubic,
            transitionBuilder: (Widget child, Animation<double> animation) {
              return SizeTransition(
                sizeFactor: animation,
                axisAlignment: -1.0,
                child: child, // Animates from top
              );
            },
            child: _showAddSupplementForm
                ? Card(
                    key: const ValueKey('addSupplementFormCard'),
                    elevation: LymDesignSystem.elevationMd,
                    margin: const EdgeInsets.only(
                        top: LymDesignSystem.spacing16,
                        bottom: LymDesignSystem.spacing24),
                    shape: RoundedRectangleBorder(
                        borderRadius:
                            BorderRadius.circular(LymDesignSystem.radiusLg),
                        side: const BorderSide(
                            color: LymDesignSystem.gray200,
                            width: LymDesignSystem.borderWidthThin)),
                    color: LymDesignSystem.white,
                    child: Padding(
                      padding: const EdgeInsets.all(LymDesignSystem.spacing20),
                      child: Form(
                        key: _formKey,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text("Détails du Complément",
                                style: design.titleMedium?.copyWith(
                                    fontWeight: FontWeight.w600,
                                    color: LymDesignSystem.gray700)),
                            const SizedBox(height: LymDesignSystem.spacing16),
                            _buildAutocompleteField(
                              controller: _supplementNameController,
                              options: _commonSupplements,
                              labelText: 'Nom du complément',
                              hintText:
                                  'Ex: Vitamine D3, Magnésium Bisglycinate...',
                              prefixIcon: MdiIcons.pill,
                            ),
                            const SizedBox(height: LymDesignSystem.spacing16),
                            Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Expanded(
                                  flex: 3,
                                  child: _buildTextFormField(
                                    controller: _supplementDosageController,
                                    labelText: 'Dosage',
                                    hintText: 'Ex: 1000, 2, 500...',
                                    prefixIcon: MdiIcons.weightKilogram,
                                    isNumeric: true,
                                  ),
                                ),
                                const SizedBox(
                                    width: LymDesignSystem.spacing12),
                                Expanded(
                                  flex: 2,
                                  child: _buildAutocompleteField(
                                    controller: _supplementUnitController,
                                    options: _commonUnits,
                                    labelText: 'Unité',
                                    hintText: 'Ex: mg, UI, gélule...',
                                    prefixIcon: MdiIcons.beakerOutline,
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: LymDesignSystem.spacing16),
                            _buildAutocompleteField(
                              controller: _supplementTimingController,
                              options: _commonTimings,
                              labelText: 'Moment de prise',
                              hintText: 'Ex: Matin, Au coucher...',
                              prefixIcon: MdiIcons.clockTimeFourOutline,
                            ),
                            const SizedBox(height: LymDesignSystem.spacing16),
                            _buildTextFormField(
                              controller: _supplementNotesController,
                              labelText: 'Notes',
                              hintText:
                                  'Ex: Marque spécifique, raison de la prise...',
                              prefixIcon: MdiIcons.noteTextOutline,
                              maxLines: 2,
                              isOptional: true,
                            ),
                            const SizedBox(height: LymDesignSystem.spacing24),
                            Center(
                              child: ElevatedButton.icon(
                                  onPressed: _addSupplement,
                                  icon: Icon(MdiIcons.checkCircleOutline,
                                      size: 20, color: LymDesignSystem.white),
                                  label: Text('Enregistrer le Complément',
                                      style: design.labelLarge?.copyWith(
                                          color: LymDesignSystem.white,
                                          fontWeight: FontWeight.w600)),
                                  style: ElevatedButton.styleFrom(
                                          backgroundColor: LymDesignSystem.mint,
                                          padding: const EdgeInsets.symmetric(
                                            horizontal:
                                                LymDesignSystem.spacing24,
                                            vertical: LymDesignSystem.spacing16,
                                          ),
                                          shape: RoundedRectangleBorder(
                                              borderRadius:
                                                  BorderRadius.circular(
                                                      LymDesignSystem
                                                          .radiusMd)))
                                      .copyWith(
                                          elevation: WidgetStateProperty.all(
                                              LymDesignSystem.elevationSm))),
                            ),
                          ],
                        ),
                      ),
                    ),
                  )
                : const SizedBox.shrink(key: ValueKey('emptyFormPlaceholder')),
          ),

          if (_supplements.isEmpty && !_showAddSupplementForm)
            Container(
              padding: const EdgeInsets.symmetric(
                  vertical: LymDesignSystem.spacing48,
                  horizontal: LymDesignSystem.spacing24),
              width: double.infinity,
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Icon(MdiIcons.pillOff,
                      size: 56, color: LymDesignSystem.gray300),
                  const SizedBox(height: LymDesignSystem.spacing16),
                  Text(
                    'Aucun complément ajouté.',
                    style: design.titleMedium?.copyWith(
                        color: LymDesignSystem.gray600,
                        fontWeight: FontWeight.w500),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: LymDesignSystem.spacing8),
                  Text(
                    'Cliquez sur "Nouveau" pour en ajouter un.',
                    style: design.bodyMedium
                        ?.copyWith(color: LymDesignSystem.gray500),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            )
          else if (_supplements.isNotEmpty)
            ListView.separated(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemCount: _supplements.length,
              itemBuilder: (context, index) {
                final supplement = _supplements[index];
                return Card(
                  elevation: LymDesignSystem.elevationXs,
                  shape: RoundedRectangleBorder(
                      borderRadius:
                          BorderRadius.circular(LymDesignSystem.radiusMd),
                      side: const BorderSide(
                          color: LymDesignSystem.gray200,
                          width: LymDesignSystem.borderWidthThin)),
                  margin: const EdgeInsets.symmetric(
                      vertical: LymDesignSystem.spacing6),
                  child: ListTile(
                    contentPadding: const EdgeInsets.symmetric(
                        horizontal: LymDesignSystem.spacing16,
                        vertical: LymDesignSystem.spacing10),
                    leading: CircleAvatar(
                      backgroundColor: LymDesignSystem.mint.withValues(alpha: 0.15),
                      child: Icon(MdiIcons.pill,
                          color: LymDesignSystem.mintDark, size: 22),
                    ),
                    title: Text(
                      supplement.name,
                      style: design.titleMedium?.copyWith(
                          fontWeight: FontWeight.w600,
                          color: LymDesignSystem.gray800),
                    ),
                    subtitle: Text(
                      '${supplement.dosage} ${supplement.unit} - ${supplement.timing}${supplement.notes != null && supplement.notes!.isNotEmpty ? "\nNotes: ${supplement.notes}" : ""}',
                      style: design.bodySmall?.copyWith(
                          color: LymDesignSystem.gray600, height: 1.4),
                    ),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: Icon(MdiIcons.pencilOutline,
                              color: LymDesignSystem.gray500, size: 20),
                          onPressed: () => _editSupplement(index, supplement),
                          tooltip: 'Modifier',
                        ),
                        IconButton(
                          icon: Icon(MdiIcons.deleteOutline,
                              color: LymDesignSystem.error, size: 20),
                          onPressed: () => _removeSupplement(index),
                          tooltip: 'Supprimer',
                        ),
                      ],
                    ),
                    isThreeLine: supplement.notes != null &&
                        supplement.notes!.isNotEmpty,
                  ),
                );
              },
              separatorBuilder: (context, index) =>
                  const SizedBox(height: LymDesignSystem.spacing4),
            ),
          const SizedBox(height: LymDesignSystem.spacing24),
        ],
      ),
    );
  }
}

// Ensure Supplement class is defined in user_profile.dart as provided previously
// class Supplement {
//   final String name;
//   final String dosage;
//   final String unit;
//   final String timing;
//   final String? notes;

//   Supplement({
//     required this.name,
//     required this.dosage,
//     required this.unit,
//     required this.timing,
//     this.notes,
//   });
// }
