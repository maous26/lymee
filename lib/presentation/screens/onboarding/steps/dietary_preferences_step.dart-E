// lib/presentation/screens/onboarding/steps/dietary_preferences_step.dart
import 'package:flutter/material.dart';
import 'package:lym_nutrition/domain/entities/user_dietary_preferences.dart';
import 'package:lym_nutrition/domain/entities/user_profile.dart';
import 'package:lym_nutrition/presentation/themes/lym_design_system.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

class DietaryPreferencesStep extends StatefulWidget {
  final UserProfile userProfile;
  final Function(UserProfile) onUpdateProfile;
  final VoidCallback onNextRequested; // Changed from onNext

  const DietaryPreferencesStep({
    Key? key,
    required this.userProfile,
    required this.onUpdateProfile,
    required this.onNextRequested, // Changed from onNext
  }) : super(key: key);

  @override
  // ignore: library_private_types_in_public_api
  DietaryPreferencesStepState createState() =>
      DietaryPreferencesStepState(); // Made state public
}

// ignore: public_member_api_docs
class DietaryPreferencesStepState extends State<DietaryPreferencesStep> {
  late UserDietaryPreferences _preferences;
  final TextEditingController _allergyController = TextEditingController();
  final FocusNode _allergyFocusNode = FocusNode();
  String _currentAllergyInput = '';

  final List<String> _commonAllergens = [
    'Peanuts',
    'Tree nuts',
    'Milk',
    'Eggs',
    'Fish',
    'Shellfish',
    'Soy',
    'Gluten',
    'Sesame',
    'Mustard',
    'Celery',
    'Lupin',
    'Sulphites',
    'Wheat',
    'Barley',
    'Rye',
    'Oats'
  ];

  @override
  void initState() {
    super.initState();
    _preferences = widget.userProfile.dietaryPreferences;
  }

  @override
  void dispose() {
    _allergyController.dispose();
    _allergyFocusNode.dispose();
    super.dispose();
  }

  void _updateProfile() {
    final updatedProfile = widget.userProfile.copyWith(
      dietaryPreferences: _preferences,
    );
    widget.onUpdateProfile(updatedProfile);
  }

  void validateAndProceed() {
    _updateProfile();
    // No specific validation for this step, user can skip if they want
    widget.onNextRequested();
  }

  void _addAllergy(String allergy) {
    final String newAllergy = allergy.trim();
    if (newAllergy.isNotEmpty) {
      setState(() {
        if (!_preferences.allergies.contains(newAllergy)) {
          final updatedAllergies = List<String>.from(_preferences.allergies)
            ..add(newAllergy);
          _preferences = _preferences.copyWith(allergies: updatedAllergies);
        }
        _allergyController.clear();
        _currentAllergyInput = '';
        _allergyFocusNode.unfocus(); // Unfocus after adding
      });
      _updateProfile();
    }
  }

  void _removeAllergy(String allergy) {
    setState(() {
      final updatedAllergies = List<String>.from(_preferences.allergies)
        ..remove(allergy);
      _preferences = _preferences.copyWith(allergies: updatedAllergies);
    });
    _updateProfile();
  }

  Widget _buildDietSwitchListTile({
    required String title,
    required String subtitle,
    required bool value,
    required ValueChanged<bool> onChanged,
    required IconData icon,
    bool enabled = true,
  }) {
    return SwitchListTile(
      title: Text(title,
          style: LymDesignSystem.textTheme.titleMedium?.copyWith(
              color: LymDesignSystem.gray800, fontWeight: FontWeight.w500)),
      subtitle: Text(subtitle,
          style: LymDesignSystem.textTheme.bodySmall
              ?.copyWith(color: LymDesignSystem.gray600)),
      secondary: Icon(icon,
          color: value ? LymDesignSystem.mint : LymDesignSystem.gray400,
          size: 28),
      value: value,
      onChanged: enabled ? onChanged : null,
      activeColor: LymDesignSystem.mint,
      inactiveThumbColor: LymDesignSystem.gray300,
      inactiveTrackColor: LymDesignSystem.gray200,
      contentPadding: const EdgeInsets.symmetric(
          horizontal: LymDesignSystem.spacing12,
          vertical: LymDesignSystem.spacing8),
      dense: false,
    );
  }

  @override
  Widget build(BuildContext context) {
    const currentAccentColor = LymDesignSystem.indigo;

    return SingleChildScrollView(
      padding: const EdgeInsets.all(LymDesignSystem.spacing20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Your Dietary World',
            style: LymDesignSystem.textTheme.headlineSmall?.copyWith(
                color: LymDesignSystem.gray800, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: LymDesignSystem.spacing8),
          Text(
            'Help us understand your eating habits and any ingredients to avoid. This ensures we tailor your nutrition plan perfectly for you!',
            style: LymDesignSystem.textTheme.bodyMedium
                ?.copyWith(color: LymDesignSystem.gray700),
          ),
          const SizedBox(height: LymDesignSystem.spacing32),
          Text(
            'Special Diets & Lifestyles',
            style: LymDesignSystem.textTheme.titleLarge?.copyWith(
                color: LymDesignSystem.gray700, fontWeight: FontWeight.w600),
          ),
          const SizedBox(height: LymDesignSystem.spacing12),
          Card(
            elevation: LymDesignSystem.elevationSm,
            shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(LymDesignSystem.radiusLg)),
            child: Column(
              children: [
                _buildDietSwitchListTile(
                  title: 'Vegetarian',
                  subtitle: 'No meat or fish products.',
                  icon: MdiIcons.leaf,
                  value: _preferences.isVegetarian,
                  onChanged: (value) {
                    setState(() {
                      _preferences = _preferences.copyWith(isVegetarian: value);
                      if (!value && _preferences.isVegan) {
                        _preferences = _preferences.copyWith(isVegan: false);
                      }
                    });
                    _updateProfile();
                  },
                ),
                const Divider(
                    height: 1,
                    indent: LymDesignSystem.spacing16 +
                        28 +
                        LymDesignSystem.spacing12,
                    endIndent: LymDesignSystem.spacing16,
                    color: LymDesignSystem.gray200),
                _buildDietSwitchListTile(
                  title: 'Vegan',
                  subtitle: 'Excludes all animal products.',
                  icon: MdiIcons.seed,
                  value: _preferences.isVegan,
                  enabled: _preferences.isVegetarian,
                  onChanged: (value) {
                    setState(() {
                      _preferences = _preferences.copyWith(isVegan: value);
                    });
                    _updateProfile();
                  },
                ),
                const Divider(
                    height: 1,
                    indent: LymDesignSystem.spacing16 +
                        28 +
                        LymDesignSystem.spacing12,
                    endIndent: LymDesignSystem.spacing16,
                    color: LymDesignSystem.gray200),
                _buildDietSwitchListTile(
                  title: 'Halal',
                  subtitle: 'Foods permissible under Islamic law.',
                  icon: MdiIcons.moonFull,
                  value: _preferences.isHalal,
                  onChanged: (value) {
                    setState(() {
                      _preferences = _preferences.copyWith(isHalal: value);
                    });
                    _updateProfile();
                  },
                ),
                const Divider(
                    height: 1,
                    indent: LymDesignSystem.spacing16 +
                        28 +
                        LymDesignSystem.spacing12,
                    endIndent: LymDesignSystem.spacing16,
                    color: LymDesignSystem.gray200),
                _buildDietSwitchListTile(
                  title: 'Kosher',
                  subtitle: 'Foods conforming to Jewish dietary law.',
                  icon: MdiIcons.starDavid,
                  value: _preferences.isKosher,
                  onChanged: (value) {
                    setState(() {
                      _preferences = _preferences.copyWith(isKosher: value);
                    });
                    _updateProfile();
                  },
                ),
                const Divider(
                    height: 1,
                    indent: LymDesignSystem.spacing16 +
                        28 +
                        LymDesignSystem.spacing12,
                    endIndent: LymDesignSystem.spacing16,
                    color: LymDesignSystem.gray200),
                _buildDietSwitchListTile(
                  title: 'Gluten-Free',
                  subtitle: 'Excludes gluten (wheat, barley, rye).',
                  icon: MdiIcons.barleyOff,
                  value: _preferences.isGlutenFree,
                  onChanged: (value) {
                    setState(() {
                      _preferences = _preferences.copyWith(isGlutenFree: value);
                    });
                    _updateProfile();
                  },
                ),
                const Divider(
                    height: 1,
                    indent: LymDesignSystem.spacing16 +
                        28 +
                        LymDesignSystem.spacing12,
                    endIndent: LymDesignSystem.spacing16,
                    color: LymDesignSystem.gray200),
                _buildDietSwitchListTile(
                  title: 'Lactose-Free',
                  subtitle: 'Excludes dairy with lactose.',
                  icon: MdiIcons.cowOff,
                  value: _preferences.isLactoseFree,
                  onChanged: (value) {
                    setState(() {
                      _preferences =
                          _preferences.copyWith(isLactoseFree: value);
                    });
                    _updateProfile();
                  },
                ),
              ],
            ),
          ),
          const SizedBox(height: LymDesignSystem.spacing32),
          const Divider(
              color: LymDesignSystem.gray300,
              thickness: LymDesignSystem.borderWidthThin),
          const SizedBox(height: LymDesignSystem.spacing24),
          Text(
            'Allergies & Intolerances',
            style: LymDesignSystem.textTheme.titleLarge?.copyWith(
                color: LymDesignSystem.gray700, fontWeight: FontWeight.w600),
          ),
          const SizedBox(height: LymDesignSystem.spacing8),
          Text(
            'Specify any ingredients you need to avoid. We\'ll keep an eye out for them!',
            style: LymDesignSystem.textTheme.bodyMedium
                ?.copyWith(color: LymDesignSystem.gray600),
          ),
          const SizedBox(height: LymDesignSystem.spacing20),
          RawAutocomplete<String>(
            focusNode: _allergyFocusNode,
            textEditingController: _allergyController,
            optionsBuilder: (TextEditingValue textEditingValue) {
              _currentAllergyInput = textEditingValue.text;
              if (textEditingValue.text.isEmpty) {
                return const Iterable<String>.empty();
              }
              return _commonAllergens.where((String option) {
                return option
                        .toLowerCase()
                        .contains(textEditingValue.text.toLowerCase()) &&
                    !_preferences.allergies.any(
                        (added) => added.toLowerCase() == option.toLowerCase());
              });
            },
            onSelected: (String selection) {
              _addAllergy(selection);
            },
            fieldViewBuilder: (BuildContext context,
                TextEditingController fieldTextEditingController,
                FocusNode fieldFocusNode,
                VoidCallback onFieldSubmitted) {
              return TextFormField(
                controller: fieldTextEditingController,
                focusNode: fieldFocusNode,
                decoration: InputDecoration(
                  labelText: 'Add Allergy or Intolerance',
                  labelStyle: LymDesignSystem.textTheme.bodyMedium
                      ?.copyWith(color: LymDesignSystem.gray600),
                  hintText: 'e.g., Peanuts, Milk, Gluten',
                  hintStyle: LymDesignSystem.textTheme.bodyMedium
                      ?.copyWith(color: LymDesignSystem.gray400),
                  prefixIcon: Icon(MdiIcons.alertCircleOutline,
                      color: currentAccentColor.withValues(alpha: 0.9),
                      size: 22),
                  suffixIcon: _currentAllergyInput.isNotEmpty
                      ? IconButton(
                          icon: const Icon(Icons.add_circle_rounded,
                              color: LymDesignSystem.mint, size: 26),
                          tooltip: 'Add Allergy',
                          onPressed: () {
                            _addAllergy(_currentAllergyInput);
                          },
                        )
                      : null,
                  border: OutlineInputBorder(
                    borderRadius:
                        BorderRadius.circular(LymDesignSystem.radiusMd),
                    borderSide: const BorderSide(
                        color: LymDesignSystem.gray300,
                        width: LymDesignSystem.borderWidthThin),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius:
                        BorderRadius.circular(LymDesignSystem.radiusMd),
                    borderSide: const BorderSide(
                        color: LymDesignSystem.gray300,
                        width: LymDesignSystem.borderWidthThin),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius:
                        BorderRadius.circular(LymDesignSystem.radiusMd),
                    borderSide: const BorderSide(
                        color: currentAccentColor,
                        width: LymDesignSystem.borderWidthFocus),
                  ),
                ),
                style: LymDesignSystem.textTheme.bodyLarge
                    ?.copyWith(color: LymDesignSystem.gray800),
                onChanged: (value) =>
                    setState(() => _currentAllergyInput = value),
                onFieldSubmitted: (String value) {
                  _addAllergy(value);
                },
              );
            },
            optionsViewBuilder: (BuildContext context,
                AutocompleteOnSelected<String> onSelected,
                Iterable<String> options) {
              return Align(
                alignment: Alignment.topLeft,
                child: Material(
                  elevation: LymDesignSystem.elevationLg,
                  shape: RoundedRectangleBorder(
                      borderRadius:
                          BorderRadius.circular(LymDesignSystem.radiusMd)),
                  child: ConstrainedBox(
                    constraints: BoxConstraints(
                        maxHeight: 220,
                        maxWidth: MediaQuery.of(context).size.width -
                            (LymDesignSystem.spacing20 * 2)),
                    child: ListView.builder(
                      padding: const EdgeInsets.symmetric(
                          vertical: LymDesignSystem.spacing4),
                      shrinkWrap: true,
                      itemCount: options.length,
                      itemBuilder: (BuildContext context, int index) {
                        final String option = options.elementAt(index);
                        return InkWell(
                          onTap: () => onSelected(option),
                          child: Padding(
                            padding: const EdgeInsets.symmetric(
                                horizontal: LymDesignSystem.spacing16,
                                vertical: LymDesignSystem.spacing12),
                            child: Text(option,
                                style: LymDesignSystem.textTheme.bodyMedium
                                    ?.copyWith(color: LymDesignSystem.gray700)),
                          ),
                        );
                      },
                    ),
                  ),
                ),
              );
            },
          ),
          const SizedBox(height: LymDesignSystem.spacing20),
          if (_preferences.allergies.isEmpty)
            Padding(
              padding: const EdgeInsets.symmetric(
                  vertical: LymDesignSystem.spacing24),
              child: Center(
                child: Opacity(
                  opacity: 0.8,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(MdiIcons.checkDecagramOutline,
                          size: 48, color: LymDesignSystem.success),
                      const SizedBox(height: LymDesignSystem.spacing12),
                      Text(
                        'No allergies specified. Looking good!',
                        style: LymDesignSystem.textTheme.bodyLarge
                            ?.copyWith(color: LymDesignSystem.gray700),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
              ),
            )
          else
            Wrap(
              spacing: LymDesignSystem.spacing10,
              runSpacing: LymDesignSystem.spacing10,
              children: _preferences.allergies.map((allergy) {
                return Chip(
                  label: Text(allergy,
                      style: LymDesignSystem.textTheme.bodySmall?.copyWith(
                          color: LymDesignSystem.error,
                          fontWeight: FontWeight.w600)),
                  avatar: Icon(MdiIcons.alertOctagonOutline,
                      color: LymDesignSystem.error, size: 18),
                  onDeleted: () => _removeAllergy(allergy),
                  deleteIcon: Icon(Icons.cancel_outlined,
                      size: 18,
                      color: LymDesignSystem.error.withValues(
                          alpha: 0.8)), // Changed to a valid existing Icon
                  backgroundColor: LymDesignSystem.error.withValues(alpha: 0.1),
                  padding: const EdgeInsets.symmetric(
                      horizontal: LymDesignSystem.spacing10,
                      vertical: LymDesignSystem.spacing6),
                  shape: RoundedRectangleBorder(
                    borderRadius:
                        BorderRadius.circular(LymDesignSystem.radiusMd),
                    side: BorderSide(
                        color: LymDesignSystem.error.withValues(alpha: 0.4),
                        width: LymDesignSystem.borderWidthThin),
                  ),
                );
              }).toList(),
            ),
          if (_preferences.allergies.isNotEmpty)
            Padding(
              padding: const EdgeInsets.only(top: LymDesignSystem.spacing24),
              child: Container(
                padding: const EdgeInsets.all(LymDesignSystem.spacing16),
                decoration: BoxDecoration(
                  color: LymDesignSystem.info.withValues(alpha: 0.08),
                  borderRadius: BorderRadius.circular(LymDesignSystem.radiusLg),
                  border: Border.all(
                      color: LymDesignSystem.info.withValues(alpha: 0.4),
                      width: LymDesignSystem.borderWidthThin),
                ),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Icon(MdiIcons.informationOutline,
                        color: LymDesignSystem.info, size: 24),
                    const SizedBox(width: LymDesignSystem.spacing12),
                    Expanded(
                      child: Text(
                        'We\'ll highlight foods containing these allergens and help you filter them out. You can always update these preferences later in your profile settings.',
                        style: LymDesignSystem.textTheme.bodyMedium?.copyWith(
                            color: LymDesignSystem.gray700, height: 1.4),
                      ),
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
    );
  }
}
