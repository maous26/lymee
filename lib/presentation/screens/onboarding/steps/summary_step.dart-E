// lib/presentation/screens/onboarding/steps/summary_step.dart
import 'package:flutter/material.dart';
import 'package:lym_nutrition/domain/entities/user_profile.dart';
import 'package:lym_nutrition/presentation/themes/lym_design_system.dart';

class SummaryStep extends StatelessWidget {
  final UserProfile userProfile;
  final VoidCallback onSubmit;
  final bool isSubmitting;
  final Function(int sectionIndex)? onEdit;

  const SummaryStep({
    Key? key,
    required this.userProfile,
    required this.onSubmit,
    this.isSubmitting = false,
    this.onEdit,
  }) : super(key: key);

  void validateAndProceed() {
    onSubmit();
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding:
          const EdgeInsets.all(LymDesignSystem.spacing20), // Increased padding
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Prêt à vérifier vos informations ?',
            style: LymDesignSystem.textTheme.headlineMedium?.copyWith(
              color: LymDesignSystem.primary,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: LymDesignSystem.spacing8),
          Text(
            'Voici un résumé de votre profil. Assurez-vous que tout est correct avant de continuer. Vous pourrez toujours modifier ces informations plus tard.',
            style: LymDesignSystem.textTheme.bodyLarge
                ?.copyWith(color: LymDesignSystem.gray700),
          ),
          const SizedBox(height: LymDesignSystem.spacing24),

          // Informations de base
          _buildSectionCard(
            context,
            title: 'Informations Personnelles',
            icon: Icons.person_pin_circle_outlined, // Enhanced icon
            accentColor: LymDesignSystem.indigo,
            content: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildInfoRow(
                    context, 'Nom', userProfile.name ?? 'Non spécifié',
                    icon: Icons.person_outline),
                _buildInfoRow(context, 'Âge', '${userProfile.age} ans',
                    icon: Icons.cake_outlined),
                _buildInfoRow(
                    context, 'Genre', _getGenderLabel(userProfile.gender),
                    icon: Icons.wc_outlined),
                _buildInfoRow(context, 'Taille',
                    '${userProfile.heightCm.toStringAsFixed(0)} cm',
                    icon: Icons.height_outlined),
                _buildInfoRow(context, 'Poids Actuel',
                    '${userProfile.weightKg.toStringAsFixed(1)} kg',
                    icon: Icons.monitor_weight_outlined),
              ],
            ),
            onEdit: onEdit != null ? () => onEdit!(0) : null,
          ),
          const SizedBox(height: LymDesignSystem.spacing20),

          // Niveau d\'activité
          _buildSectionCard(
            context,
            title: 'Activité Physique',
            icon: Icons.directions_run_outlined, // Enhanced icon
            accentColor: LymDesignSystem.coral,
            content: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildInfoRow(context, 'Niveau Général',
                    _getActivityLevelLabel(userProfile.activityLevel),
                    icon: Icons.speed_outlined),
                if (userProfile.sportActivities.isNotEmpty) ...[
                  const SizedBox(height: LymDesignSystem.spacing12),
                  Text(
                    'Activités Spécifiques:',
                    style: LymDesignSystem.textTheme.titleMedium?.copyWith(
                        // Enhanced style
                        color: LymDesignSystem.gray700,
                        fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: LymDesignSystem.spacing8),
                  ...userProfile.sportActivities.map((activity) {
                    return Padding(
                      padding: const EdgeInsets.only(
                          left: LymDesignSystem.spacing8,
                          bottom: LymDesignSystem.spacing6),
                      child: Row(
                        // Added icon for each activity
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Icon(Icons.fitness_center,
                              size: 18,
                              color:
                                  LymDesignSystem.coral.withValues(alpha: 0.8)),
                          const SizedBox(width: LymDesignSystem.spacing8),
                          Expanded(
                            child: Text(
                              '${activity.name} (${_getSportIntensityLabel(activity.intensity)}): ${activity.minutesPerSession} min × ${activity.sessionsPerWeek} fois/sem.',
                              style: LymDesignSystem.textTheme.bodyMedium
                                  ?.copyWith(color: LymDesignSystem.gray700),
                            ),
                          ),
                        ],
                      ),
                    );
                  }).toList(),
                ] else
                  _buildInfoRow(
                      context, 'Activités Spécifiques', 'Aucune ajoutée',
                      icon: Icons.info_outline),
              ],
            ),
            onEdit: onEdit != null ? () => onEdit!(1) : null,
          ),
          const SizedBox(height: LymDesignSystem.spacing20),

          // Objectif de poids
          _buildSectionCard(
            context,
            title: 'Objectif de Poids',
            // icon: MdiIcons.scaleBathroom, // Example using MDI
            icon: Icons.flag_outlined, // Enhanced icon
            accentColor: LymDesignSystem.amber,
            content: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildInfoRow(context, 'Objectif',
                    _getWeightGoalLabel(userProfile.weightGoal),
                    icon: Icons.track_changes),
                if (userProfile.weightGoal != WeightGoal.maintain)
                  _buildInfoRow(context, 'Rythme Souhaité',
                      '${userProfile.weightGoalKgPerWeek.toStringAsFixed(1)} kg / semaine',
                      icon: Icons.trending_up_outlined),
              ],
            ),
            onEdit: onEdit != null ? () => onEdit!(2) : null,
          ),
          const SizedBox(height: LymDesignSystem.spacing20),

          // Préférences alimentaires
          _buildSectionCard(
            context,
            title: 'Préférences Alimentaires',
            icon: Icons.restaurant_outlined, // Enhanced icon
            accentColor: LymDesignSystem.protein,
            content: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (_hasSpecialDiet(userProfile)) ...[
                  Text(
                    'Régimes Spécifiques:',
                    style: LymDesignSystem.textTheme.titleMedium?.copyWith(
                        // Enhanced style
                        color: LymDesignSystem.gray700,
                        fontWeight: FontWeight.w600),
                  ),
                  const SizedBox(height: LymDesignSystem.spacing8),
                  Wrap(
                    spacing: LymDesignSystem.spacing8,
                    runSpacing: LymDesignSystem.spacing6,
                    children: [
                      if (userProfile.dietaryPreferences.isVegetarian)
                        _buildDietChip('Végétarien', LymDesignSystem.success,
                            icon: Icons.eco_outlined),
                      if (userProfile.dietaryPreferences.isVegan)
                        _buildDietChip('Végétalien', LymDesignSystem.success,
                            icon: Icons
                                .eco), // Corrected: LymDesignSystem.successDark to LymDesignSystem.success
                      if (userProfile.dietaryPreferences.isHalal)
                        _buildDietChip('Halal', LymDesignSystem.info,
                            icon: Icons.food_bank_outlined),
                      if (userProfile.dietaryPreferences.isKosher)
                        _buildDietChip('Casher', LymDesignSystem.infoLight,
                            icon: Icons.food_bank),
                      if (userProfile.dietaryPreferences.isGlutenFree)
                        _buildDietChip('Sans gluten', LymDesignSystem.warning,
                            icon: Icons.no_food_outlined),
                      if (userProfile.dietaryPreferences.isLactoseFree)
                        _buildDietChip(
                            'Sans lactose', LymDesignSystem.warningLight,
                            icon: Icons.no_drinks_outlined),
                    ],
                  ),
                ] else
                  _buildInfoRow(context, 'Régimes Spécifiques', 'Aucun',
                      icon: Icons.info_outline),
                const SizedBox(height: LymDesignSystem.spacing16),
                Text(
                  'Allergies:',
                  style: LymDesignSystem.textTheme.titleMedium?.copyWith(
                      // Enhanced style
                      color: LymDesignSystem.gray700,
                      fontWeight: FontWeight.w600),
                ),
                const SizedBox(height: LymDesignSystem.spacing8),
                if (userProfile.dietaryPreferences.allergies.isNotEmpty)
                  Wrap(
                    spacing: LymDesignSystem.spacing8,
                    runSpacing: LymDesignSystem.spacing6,
                    children:
                        userProfile.dietaryPreferences.allergies.map((allergy) {
                      return _buildDietChip(allergy, LymDesignSystem.error,
                          icon: Icons.warning_amber_outlined);
                    }).toList(),
                  )
                else
                  Text('  Aucune allergie spécifiée',
                      style: LymDesignSystem.textTheme.bodyMedium
                          ?.copyWith(color: LymDesignSystem.gray600)),
              ],
            ),
            onEdit: onEdit != null ? () => onEdit!(3) : null,
          ),
          const SizedBox(height: LymDesignSystem.spacing20),

          // Jeûne intermittent
          _buildSectionCard(
            context,
            title: 'Jeûne Intermittent',
            icon: Icons.hourglass_empty_outlined, // Enhanced icon
            accentColor: LymDesignSystem.fiber,
            content: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildInfoRow(context, 'Type de Jeûne',
                    _getFastingTypeLabel(userProfile.fastingSchedule.type),
                    icon: Icons.timer_outlined),
                if (userProfile.fastingSchedule.type !=
                    IntermittentFastingType.none) ...[
                  if (userProfile.fastingSchedule.type ==
                          IntermittentFastingType.fasting16_8 ||
                      userProfile.fastingSchedule.type ==
                          IntermittentFastingType.fasting18_6 ||
                      userProfile.fastingSchedule.type ==
                          IntermittentFastingType.fasting20_4 ||
                      userProfile.fastingSchedule.type ==
                          IntermittentFastingType.custom) ...[
                    _buildInfoRow(context, 'Début du Jeûne',
                        userProfile.fastingSchedule.fastingStartTime,
                        icon: Icons.play_circle_outline),
                    _buildInfoRow(context, 'Fin du Jeûne',
                        userProfile.fastingSchedule.fastingEndTime,
                        icon: Icons.pause_circle_outline),
                  ],
                  if (userProfile.fastingSchedule.type ==
                          IntermittentFastingType.fasting5_2 ||
                      userProfile.fastingSchedule.type ==
                          IntermittentFastingType.alternateDay) ...[
                    _buildInfoRow(
                        context,
                        'Jours de Jeûne',
                        _getFastingDaysLabel(
                            userProfile.fastingSchedule.fastingDays),
                        icon: Icons.calendar_today_outlined),
                  ],
                ],
              ],
            ),
            onEdit: onEdit != null ? () => onEdit!(4) : null,
          ),
          const SizedBox(height: LymDesignSystem.spacing20),

          // Compléments alimentaires
          _buildSectionCard(
            context,
            title: 'Compléments Alimentaires',
            // icon: MdiIcons.pill, // Example using MDI
            icon: Icons.medication_liquid_outlined, // Enhanced icon
            accentColor: LymDesignSystem.water,
            content: userProfile.supplements.isEmpty
                ? Row(
                    // Added icon for empty state
                    children: [
                      const Icon(Icons.info_outline,
                          color: LymDesignSystem.gray600, size: 18),
                      const SizedBox(width: LymDesignSystem.spacing8),
                      Expanded(
                        child: Text('Aucun complément alimentaire ajouté',
                            style: LymDesignSystem.textTheme.bodyMedium
                                ?.copyWith(color: LymDesignSystem.gray600)),
                      ),
                    ],
                  )
                : Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: userProfile.supplements.map((supplement) {
                      return Padding(
                        padding: const EdgeInsets.only(
                            bottom: LymDesignSystem.spacing12),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Icon(Icons.adjust,
                                    size: 16,
                                    color: LymDesignSystem.water.withValues(
                                        alpha:
                                            0.8)), // Icon for each supplement
                                const SizedBox(width: LymDesignSystem.spacing8),
                                Expanded(
                                  child: Text(
                                    supplement.name,
                                    style: LymDesignSystem.textTheme.titleMedium
                                        ?.copyWith(
                                            // Enhanced style
                                            color: LymDesignSystem.gray800,
                                            fontWeight: FontWeight.w600),
                                  ),
                                ),
                              ],
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  left: LymDesignSystem.spacing24,
                                  top: LymDesignSystem
                                      .spacing2), // Indent details
                              child: Text(
                                '${supplement.dosage} ${supplement.unit} - ${supplement.timing}',
                                style: LymDesignSystem.textTheme.bodyMedium
                                    ?.copyWith(color: LymDesignSystem.gray700),
                              ),
                            ),
                            if (supplement.notes != null &&
                                supplement.notes!.isNotEmpty)
                              Padding(
                                padding: const EdgeInsets.only(
                                    left: LymDesignSystem.spacing24,
                                    top: LymDesignSystem
                                        .spacing4), // Indent notes
                                child: Row(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Icon(Icons.notes_outlined,
                                        size: 14,
                                        color: LymDesignSystem.gray500),
                                    const SizedBox(
                                        width: LymDesignSystem.spacing6),
                                    Expanded(
                                      child: Text(
                                        supplement
                                            .notes!, // Removed 'Notes: ' prefix as icon implies it
                                        style: LymDesignSystem
                                            .textTheme.bodySmall
                                            ?.copyWith(
                                                fontStyle: FontStyle.italic,
                                                color: LymDesignSystem.gray600),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                          ],
                        ),
                      );
                    }).toList(),
                  ),
            onEdit: onEdit != null ? () => onEdit!(5) : null,
          ),
          const SizedBox(height: LymDesignSystem.spacing20),

          // Préférences de planification des repas
          _buildSectionCard(
            context,
            title: 'Planification des Repas',
            icon: Icons.calendar_view_week_outlined,
            accentColor: LymDesignSystem.water,
            content: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildInfoRow(
                  context,
                  'Niveau de cuisine',
                  _getCookingLevelLabel(
                      userProfile.mealPlanningPreferences.cookingLevel),
                  icon: Icons.restaurant_menu,
                ),
                _buildInfoRow(
                  context,
                  'Temps en semaine',
                  _getCookingTimeLabel(
                      userProfile.mealPlanningPreferences.weekdayCookingTime),
                  icon: Icons.schedule,
                ),
                _buildInfoRow(
                  context,
                  'Temps le week-end',
                  _getCookingTimeLabel(
                      userProfile.mealPlanningPreferences.weekendCookingTime),
                  icon: Icons.weekend,
                ),
                _buildInfoRow(
                  context,
                  'Budget hebdomadaire',
                  _getBudgetLabel(
                    userProfile.mealPlanningPreferences.weeklyBudget,
                    userProfile.mealPlanningPreferences.specificBudgetAmount,
                  ),
                  icon: Icons.euro,
                ),
              ],
            ),
            onEdit: onEdit != null ? () => onEdit!(6) : null,
          ),
          const SizedBox(height: LymDesignSystem.spacing24),

          // Besoins nutritionnels calculés
          _buildSectionCard(
            context,
            title: 'Objectifs Nutritionnels Journaliers',
            icon: Icons.data_exploration_outlined, // Enhanced icon
            accentColor: LymDesignSystem.mint,
            content: _buildNutrientSummary(context, userProfile),
            // No onEdit for this section as it's calculated
          ),
          const SizedBox(
              height: LymDesignSystem.spacing32), // Increased spacing

          // Message de confidentialité
          Container(
            padding: const EdgeInsets.all(
                LymDesignSystem.spacing20), // Increased padding
            decoration: BoxDecoration(
              color: LymDesignSystem.gray50
                  .withValues(alpha: 0.7), // Slightly more subtle
              borderRadius: BorderRadius.circular(
                  LymDesignSystem.radiusLg), // Consistent radius
              border: Border.all(
                  color: LymDesignSystem.gray200.withValues(alpha: 0.7)),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Icon(
                      Icons.shield_outlined, // Enhanced icon
                      color: LymDesignSystem
                          .primary, // Use primary color for emphasis
                      size: 24,
                    ),
                    const SizedBox(width: LymDesignSystem.spacing12),
                    Expanded(
                      child: Text(
                        'Confidentialité et Prochaines Étapes',
                        style: LymDesignSystem.textTheme.titleLarge?.copyWith(
                          // Enhanced style
                          color: LymDesignSystem.primary,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: LymDesignSystem.spacing16),
                Text(
                  'Vos informations sont précieuses et nous aident à personnaliser votre expérience. Elles sont stockées en toute sécurité.',
                  style: LymDesignSystem.textTheme.bodyMedium?.copyWith(
                      color: LymDesignSystem.gray700,
                      height: 1.5), // Improved line height
                ),
                const SizedBox(height: LymDesignSystem.spacing12),
                Text(
                  'Après avoir finalisé, vous pourrez explorer l\\\'application, suivre vos repas, et ajuster vos préférences à tout moment dans les paramètres.',
                  style: LymDesignSystem.textTheme.bodyMedium?.copyWith(
                      color: LymDesignSystem.gray700,
                      height: 1.5), // Improved line height
                ),
                const SizedBox(height: LymDesignSystem.spacing16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    const Icon(Icons.verified_user_outlined,
                        color: LymDesignSystem.success, size: 18),
                    const SizedBox(width: LymDesignSystem.spacing6),
                    Text(
                      "Prêt à démarrer votre parcours !",
                      style: LymDesignSystem.textTheme.labelLarge?.copyWith(
                          color: LymDesignSystem.success,
                          fontWeight: FontWeight.w600),
                    )
                  ],
                )
              ],
            ),
          ),
          const SizedBox(height: LymDesignSystem.spacing24), // Footer spacing
        ],
      ),
    );
  }

  Widget _buildSectionCard(
    BuildContext context, {
    required String title,
    required IconData icon,
    required Widget content,
    Color? accentColor,
    VoidCallback? onEdit,
  }) {
    final effectiveColor = accentColor ?? LymDesignSystem.mint;

    return Card(
      elevation: LymDesignSystem.elevationMd, // Slightly increased elevation
      shape: RoundedRectangleBorder(
        borderRadius:
            BorderRadius.circular(LymDesignSystem.radiusXl), // More rounded
        side: BorderSide(
            color: LymDesignSystem.gray200.withValues(alpha: 0.8), width: 1),
      ),
      color: LymDesignSystem.white,
      margin: EdgeInsets.zero, // Keep margin zero, spacing handled by SizedBox
      child: Padding(
        padding: const EdgeInsets.all(
            LymDesignSystem.spacing20), // Increased padding
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // Title section with icon - constrained to fit available space
                Expanded(
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Container(
                        // Icon background
                        padding: const EdgeInsets.all(LymDesignSystem.spacing6),
                        decoration: BoxDecoration(
                          color: effectiveColor.withValues(alpha: 0.1),
                          borderRadius:
                              BorderRadius.circular(LymDesignSystem.radiusMd),
                        ),
                        child: Icon(icon,
                            color: effectiveColor,
                            size: 24), // Slightly larger icon
                      ),
                      const SizedBox(width: LymDesignSystem.spacing12),
                      Flexible(
                        child: Text(
                          title,
                          style:
                              LymDesignSystem.textTheme.headlineSmall?.copyWith(
                            // Slightly larger title
                            color: LymDesignSystem
                                .gray900, // Darker for more contrast
                            fontWeight: FontWeight.w600,
                          ),
                          overflow: TextOverflow.ellipsis,
                          maxLines: 1,
                        ),
                      ),
                    ],
                  ),
                ),
                if (onEdit != null)
                  IconButton(
                    icon: const Icon(
                      Icons.edit_outlined,
                      size: 20,
                      color: LymDesignSystem.primary,
                    ),
                    onPressed: onEdit,
                    style: IconButton.styleFrom(
                      backgroundColor:
                          LymDesignSystem.primary.withValues(alpha: 0.08),
                      padding: const EdgeInsets.all(LymDesignSystem.spacing8),
                      minimumSize: const Size(36, 36),
                      tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                    ),
                    tooltip: 'Modifier cette section',
                  ),
              ],
            ),
            Divider(
              height: LymDesignSystem.spacing24, // Consistent spacing
              thickness: 1,
              color: LymDesignSystem.gray200.withValues(alpha: 0.7),
            ),
            content,
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(BuildContext context, String label, String value,
      {IconData? icon}) {
    return Padding(
      padding: const EdgeInsets.only(bottom: LymDesignSystem.spacing12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (icon != null) ...[
            Icon(icon, size: 18, color: LymDesignSystem.gray500),
            const SizedBox(width: LymDesignSystem.spacing10),
          ],
          SizedBox(
            width: icon != null ? 110 : 130, // Adjust width if icon is present
            child: Text(
              label,
              style: LymDesignSystem.textTheme.bodyMedium?.copyWith(
                  color: LymDesignSystem.gray700, fontWeight: FontWeight.w500),
            ),
          ),
          const SizedBox(width: LymDesignSystem.spacing12),
          Expanded(
            child: Text(
              value,
              style: LymDesignSystem.textTheme.bodyMedium?.copyWith(
                  color: LymDesignSystem.gray900,
                  fontWeight: FontWeight.w500), // Slightly bolder value
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDietChip(String label, Color color, {IconData? icon}) {
    return Chip(
      avatar: icon != null ? Icon(icon, size: 16, color: color) : null,
      label: Text(
        label,
        style: LymDesignSystem.textTheme.labelMedium?.copyWith(
          // Slightly larger label
          color: color,
          fontWeight: FontWeight.w600,
        ),
      ),
      backgroundColor: color.withValues(alpha: 0.1),
      side: BorderSide(color: color.withValues(alpha: 0.3)),
      padding: const EdgeInsets.symmetric(
          horizontal: LymDesignSystem.spacing10,
          vertical: LymDesignSystem.spacing6), // Increased padding
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(
            LymDesignSystem.radiusMd), // Consistent radius
      ),
    );
  }

  // Placeholder for _buildNutrientSummary - assuming it displays calculated nutritional goals
  Widget _buildNutrientSummary(BuildContext context, UserProfile profile) {
    // Placeholder for nutrient summary. Replace with actual data and UI.
    return _buildSectionCard(
      context,
      title: 'Résumé des Nutriments',
      icon: Icons.pie_chart_outline_outlined,
      accentColor: LymDesignSystem.mint, // Added accent color for consistency
      content: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildInfoRow(context, 'Calories',
              '${profile.calculatedDailyNeeds?.calories.round() ?? "N/A"} kcal',
              icon: Icons.local_fire_department_outlined),
          _buildInfoRow(context, 'Protéines',
              '${profile.calculatedDailyNeeds?.proteinGrams.round() ?? "N/A"} g',
              icon: Icons.fitness_center_outlined),
          _buildInfoRow(context, 'Lipides',
              '${profile.calculatedDailyNeeds?.fatGrams.round() ?? "N/A"} g',
              icon: Icons.spa_outlined),
          _buildInfoRow(context, 'Glucides',
              '${profile.calculatedDailyNeeds?.carbsGrams.round() ?? "N/A"} g',
              icon: Icons.bakery_dining_outlined),
          // Add more nutrient details as they become available in UserProfile
        ],
      ),
      // No onEdit for this section as it's calculated
    );
  }

  bool _hasSpecialDiet(UserProfile userProfile) {
    return userProfile.dietaryPreferences.isVegetarian ||
        userProfile.dietaryPreferences.isVegan ||
        userProfile.dietaryPreferences.isHalal ||
        userProfile.dietaryPreferences.isKosher ||
        userProfile.dietaryPreferences.isGlutenFree ||
        userProfile.dietaryPreferences.isLactoseFree;
  }

  String _getGenderLabel(Gender? gender) {
    switch (gender) {
      case Gender.male:
        return 'Homme';
      case Gender.female:
        return 'Femme';
      case Gender.other:
        return 'Autre';
      default:
        return 'Non spécifié';
    }
  }

  String _getActivityLevelLabel(ActivityLevel? level) {
    switch (level) {
      case ActivityLevel.sedentary:
        return 'Sédentaire';
      case ActivityLevel.lightlyActive:
        return 'Léger';
      case ActivityLevel.moderatelyActive:
        return 'Modéré';
      case ActivityLevel.veryActive:
        return 'Actif';
      case ActivityLevel.extremelyActive:
        return 'Très Actif';
      default:
        return 'Non spécifié';
    }
  }

  String _getSportIntensityLabel(SportIntensity? intensity) {
    switch (intensity) {
      case SportIntensity.low:
        return 'Basse';
      case SportIntensity.medium:
        return 'Moyenne';
      case SportIntensity.high:
        return 'Haute';
      case SportIntensity.extreme:
        return 'Extrême';
      default:
        return 'N/A';
    }
  }

  String _getWeightGoalLabel(WeightGoal? goal) {
    switch (goal) {
      case WeightGoal.lose:
        return 'Perdre du poids';
      case WeightGoal.maintain:
        return 'Maintenir le poids';
      case WeightGoal.gain:
        return 'Prendre du poids';
      case WeightGoal.healthyEating:
        return 'Manger sainement';
      default:
        return 'Non spécifié';
    }
  }

  String _getFastingTypeLabel(IntermittentFastingType? type) {
    switch (type) {
      case IntermittentFastingType.none:
        return 'Aucun';
      case IntermittentFastingType.fasting16_8:
        return '16/8';
      case IntermittentFastingType.fasting18_6:
        return '18/6';
      case IntermittentFastingType.fasting20_4:
        return '20/4';
      case IntermittentFastingType.fasting5_2:
        return '5:2 (deux jours par semaine)';
      case IntermittentFastingType.alternateDay:
        return 'Un jour sur deux';
      case IntermittentFastingType.custom:
        return 'Personnalisé';
      default:
        return 'Non spécifié';
    }
  }

  String _getFastingDaysLabel(List<int>? days) {
    if (days == null || days.isEmpty) return 'Non spécifié';
    return days.map((day) {
      switch (day) {
        case 1:
          return 'Lundi';
        case 2:
          return 'Mardi';
        case 3:
          return 'Mercredi';
        case 4:
          return 'Jeudi';
        case 5:
          return 'Vendredi';
        case 6:
          return 'Samedi';
        case 7:
          return 'Dimanche'; // Added Sunday
        default:
          return 'Jour $day';
      }
    }).join(', ');
  }

  String _getCookingLevelLabel(CookingLevel level) {
    switch (level) {
      case CookingLevel.beginner:
        return 'Débutant';
      case CookingLevel.intermediate:
        return 'Intermédiaire';
      case CookingLevel.advanced:
        return 'Avancé';
      case CookingLevel.expert:
        return 'Expert';
    }
  }

  String _getCookingTimeLabel(CookingTime time) {
    switch (time) {
      case CookingTime.minimal:
        return '< 15 min';
      case CookingTime.short:
        return '15-30 min';
      case CookingTime.moderate:
        return '30-60 min';
      case CookingTime.long:
        return '> 60 min';
    }
  }

  String _getBudgetLabel(FoodBudget budget, double? specificAmount) {
    if (budget == FoodBudget.generous && specificAmount != null) {
      return '${specificAmount.toStringAsFixed(0)}€/semaine';
    }

    switch (budget) {
      case FoodBudget.tight:
        return '< 50€/semaine';
      case FoodBudget.moderate:
        return '50-100€/semaine';
      case FoodBudget.comfortable:
        return '100-150€/semaine';
      case FoodBudget.generous:
        return '> 150€/semaine';
    }
  }
}
