// lib/presentation/widgets/macro_nutrients_chart.dart
import 'package:flutter/material.dart';

class MacroNutrientsChart extends StatelessWidget {
  final double proteins;
  final double carbs;
  final double fats;
  final double proteinTarget;
  final double carbsTarget;
  final double fatTarget;

  const MacroNutrientsChart({
    Key? key,
    required this.proteins,
    required this.carbs,
    required this.fats,
    required this.proteinTarget,
    required this.carbsTarget,
    required this.fatTarget,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Titre de section
        const Padding(
          padding: EdgeInsets.only(bottom: 16),
          child: Text(
            'Progression des Macronutriments',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
        ),

        // Gauges en rang√©e
        IntrinsicHeight(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Expanded(
                child: _buildMacroGauge(
                  'Prot√©ines',
                  proteins,
                  proteinTarget,
                  Colors.blue,
                  'ü•©',
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: _buildMacroGauge(
                  'Glucides',
                  carbs,
                  carbsTarget,
                  Colors.orange,
                  'üçû',
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: _buildMacroGauge(
                  'Lipides',
                  fats,
                  fatTarget,
                  Colors.red,
                  'ü•ë',
                ),
              ),
            ],
          ),
        ),

        const SizedBox(height: 20),

        // L√©gende explicative
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.grey.withValues(alpha: 0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: const Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.info_outline, size: 16, color: Colors.grey),
              SizedBox(width: 8),
              Flexible(
                child: Text(
                  'Jauge verte: objectif atteint ‚Ä¢ Jauge orange: en cours',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildMacroGauge(String name, double current, double target,
      Color baseColor, String emoji) {
    // Calculer le pourcentage de progression (avec limite √† 150% pour √©viter les d√©bordements)
    double percentage = target > 0 ? (current / target).clamp(0.0, 1.5) : 0.0;
    double displayPercentage =
        percentage.clamp(0.0, 1.0); // Pour l'affichage de la jauge

    // D√©terminer la couleur selon la progression
    Color gaugeColor;
    if (percentage >= 0.9 && percentage <= 1.1) {
      gaugeColor = Colors.green; // Objectif atteint
    } else if (percentage > 1.1) {
      gaugeColor = Colors.red; // D√©passement
    } else if (percentage >= 0.5) {
      gaugeColor = Colors.orange; // En cours
    } else {
      gaugeColor = Colors.red.withValues(alpha: 0.7); // Loin de l'objectif
    }

    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Jauge circulaire avec taille fixe
          SizedBox(
            width: 80,
            height: 80,
            child: Stack(
              alignment: Alignment.center,
              children: [
                // Fond de la jauge
                SizedBox(
                  width: 80,
                  height: 80,
                  child: CircularProgressIndicator(
                    value: 1.0,
                    strokeWidth: 6,
                    backgroundColor: Colors.transparent,
                    valueColor: AlwaysStoppedAnimation<Color>(
                      Colors.grey.withValues(alpha: 0.2),
                    ),
                  ),
                ),
                // Progression de la jauge
                SizedBox(
                  width: 80,
                  height: 80,
                  child: CircularProgressIndicator(
                    value: displayPercentage,
                    strokeWidth: 6,
                    backgroundColor: Colors.transparent,
                    valueColor: AlwaysStoppedAnimation<Color>(gaugeColor),
                    strokeCap: StrokeCap.round,
                  ),
                ),
                // Emoji au centre
                Text(
                  emoji,
                  style: const TextStyle(fontSize: 20),
                ),
              ],
            ),
          ),

          const SizedBox(height: 8),

          // Nom du macronutriment
          Text(
            name,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: baseColor,
            ),
            textAlign: TextAlign.center,
          ),

          const SizedBox(height: 4),

          // Valeurs actuelles et cibles
          RichText(
            textAlign: TextAlign.center,
            text: TextSpan(
              children: [
                TextSpan(
                  text: '${current.toStringAsFixed(1)}g',
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
                TextSpan(
                  text: ' / ${target.toStringAsFixed(1)}g',
                  style: const TextStyle(
                    fontSize: 12,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
          ),

          const SizedBox(height: 4),

          // Pourcentage avec badge color√©
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
            decoration: BoxDecoration(
              color: gaugeColor.withValues(alpha: 0.15),
              borderRadius: BorderRadius.circular(10),
            ),
            child: Text(
              '${(percentage * 100).round()}%',
              style: TextStyle(
                fontSize: 11,
                fontWeight: FontWeight.bold,
                color: gaugeColor,
              ),
            ),
          ),
        ],
      ),
    );
  }
}
